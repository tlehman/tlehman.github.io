<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Number Theory on tlehman@home</title>
    <link>/categories/number-theory/index.xml</link>
    <description>Recent content in Number Theory on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/number-theory/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Euclid&#39;s Algorithm in MIX assembly language vs Scheme</title>
      <link>/blog/2013/09/29/euclid-gcd-algorithm-in-mix-assembly-language-vs-scheme/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/29/euclid-gcd-algorithm-in-mix-assembly-language-vs-scheme/</guid>
      <description>&lt;p&gt;I wrote my first assembly language program today, it was written in
&lt;a href=&#34;https://en.wikipedia.org/wiki/MIX&#34;&gt;Donald Knuth&amp;rsquo;s MIX Assembly
Language&lt;/a&gt;. Technically I&amp;rsquo;ve written
some x86 assembly in a class in 2009, but it doesn&amp;rsquo;t count, it wasn&amp;rsquo;t
a complete program, and I barely understood it.&lt;/p&gt;

&lt;p&gt;It is an implementation of Euclid&amp;rsquo;s Algorithm to compute the greatest common divisor of two
positive integers. Writing in an assembly language is so much more
work than writing in a high-level language like Ruby, Scheme or even
C. However, it gives a much better idea of how the computer actually
works, and gives the programmer much more appreciation for all the
nice abstractions we use in our day jobs and side projects.&lt;/p&gt;

&lt;p&gt;The algorithm is the first example mentioned in &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&#34;&gt;The Art of Computer Programming&lt;/a&gt;.
I found that just reading the algorithm
alone doesn&amp;rsquo;t give much insight as to why it works, but reviewing a
little bit of discrete math first, one can see where the steps come
from.&lt;/p&gt;

&lt;p&gt;First, start by assuming that m and n are positive integers, with m &amp;gt;
n, and then the greatest common divisor d is the unique smallest integer such that:&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \exists a,b \in \mathbb{Z} : am + bn = d  $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Then, let r = m mod n (the remainder of m divided by n), we will prove
that&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \gcd(m,n) = \gcd(n,r) $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;All we need to show is that there are integers s and t such that&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ sn + tr = d  $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Note that since r = m mod n, it follows that r - m is a multiple of n,
this means:&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \exists k \in \mathbb{Z} \text{ such that }  r-m = kn $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Now, we take the integers a,b in the definition of gcd(m,n) above and
add -ar to both sides of the equation:&lt;/p&gt;

&lt;p&gt;{% latex %}
\begin{align}
   am + bn &amp;amp; = d \newline
\ am - ar + bn &amp;amp; = d - ar&lt;br /&gt;
\ a(m - r) + bn &amp;amp; = d - ar
\ kn + bn &amp;amp; = d - ar&lt;br /&gt;
\ (k + b)n &amp;amp; = d - ar&lt;br /&gt;
\ (k + b)n + ar &amp;amp; = d&lt;br /&gt;
\end{align}&lt;/p&gt;

&lt;p&gt;{% endlatex %}&lt;/p&gt;

&lt;p&gt;It is clear from the last equation above that s = (k+b) and t = a,
which completes the proof.&lt;/p&gt;

&lt;p&gt;Since gcd(m,n)=gcd(n,r), and r has the property that 0 &amp;le; r &amp;lt; n,
we can reduce the problem to a smaller problem, and since the previous
inequality always holds, it follows that r will eventually be 0, in
which case n is the greatest common divisor.&lt;/p&gt;

&lt;p&gt;This recursive form is very naturally captured in Scheme,
Here&amp;rsquo;s the Scheme version (problem 2.01 in SICP):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define (gcd m n)
  (if (= n 0)
      m
      (gcd n (remainder m n))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To implement the same algorithm in MIX assembly language, we need to
use much more primitive concepts. Firstly, we designate the X register
to hold the value of m, the I1 register to hold the value of n, and
proceed using the &lt;code&gt;DIV&lt;/code&gt; operation to find the remainder.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the MIX assembly language version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PRNT  EQU	19	* Typewriter terminal, stdout in MDK (GNU Mix Development Kit)
DVSR  EQU	100	* store n for DIV operation
SWAP  EQU	101	* swap to handle reg-to-reg transfers (inefficient)
START ENTA	0
      ENTX	165
      ENT1	90
E1    ST1	DVSR	* store n in DVSR
      DIV	DVSR	* rA &amp;lt;- m//n; rX &amp;lt;- m%n
E2    CMPX	=0=
      JE	QUIT	* halt if r=0, then CONTENTS(DVSOR)=gcd(m,n)
E3    STX	SWAP
      LD1	SWAP	* n &amp;lt;- r
      LDX	DVSR	* m &amp;lt;- n
      ENTA	0
      JMP	E1	* go to E1
QUIT  LDA	DVSR    * rA &amp;lt;- gcd(m,n)
      CHAR	0       * convert rA to character code
      STX	DVSR	* store least significant digits in DVSR cell
      OUT	DVSR(PRNT)
      HLT
      END	START
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I came up with the above code as an exercise in in MIX Assembly
Language so that I could better understand the algorithms in the book.
I have a hunch that it is not as efficient as it could be. I do a lot of
swapping from registers to memory and back. Although to be fair, I
couldn&amp;rsquo;t find a way to transfer data from a register to any of the other
registers (kind of like the &lt;a href=&#34;https://en.wikibooks.org/wiki/X86_Assembly/Data_Transfer#Move&#34;&gt;MOV instruction in x86&lt;/a&gt; ),
if someone knows of a way to do this, please correct me in
the comments, I would like to know.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>