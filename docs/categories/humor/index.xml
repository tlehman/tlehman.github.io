<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Humor on tlehman@home</title>
    <link>/categories/humor/index.xml</link>
    <description>Recent content in Humor on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/humor/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Abusing proverbs</title>
      <link>/blog/2014/04/04/abusing-proverbs/</link>
      <pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/04/04/abusing-proverbs/</guid>
      <description>&lt;p&gt;I recently became a father, and that experience has lead to me to wonder what my son will be like when he his older. It&amp;rsquo;s also lead me remember what I was like when I was younger. I usually didn&amp;rsquo;t take things my teachers said seriously, this has lead to good things and bad.&lt;/p&gt;

&lt;p&gt;For the bad, I didn&amp;rsquo;t try hard in math in high school, my SAT Math scores were terrible, way below average. As a result, I had to take Math 095 (Intermediate Algebra) in college, which didn&amp;rsquo;t even count for credit. It wasn&amp;rsquo;t until the end of my freshmen year that I took calculus. After that first year I was hooked, and learned the joy of mathematics, I also realized that a lot of things I liked were enriched by learning some math. Rubiks Cubes, Computers, networks, 4-dimensional spaces, money, etc. However, even though I got really into math and eventually got a degree in it after 5 years, I did a great disservice to my (then) future self by ignoring math and my teachers.&lt;/p&gt;

&lt;p&gt;As for the good, I remember arguing with my High School literature teacher about media, he was claiming that books were better than movies because they allow the reader to imagine the characters and settings in their own personal way. They also go much deeper into character development, something that is hard to match with a 90 minute movie. Even though I agree with these advantages, I wanted to be a contrarian and disagree with the teacher. I even came up with an argument as to why:&lt;/p&gt;

&lt;p&gt;Since &amp;lsquo;a picture is worth a thousand words&amp;rsquo;, we can establish that:&lt;/p&gt;

&lt;p&gt;{% latex %}
$1 \text{ picture} = 1000 \text{ words}$
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Then, since movies play at 24fps (frames per second), that means that for every second of movie, there are 24 pictures, or 24,000 words. Also, movies average about 90 minutes, so that means that 1 movie = (24,000*90 words) = 2,160,000 words.&lt;/p&gt;

&lt;p&gt;{% latex %}
$1 \text{ movie} = 2,160,000 \text{ words}$
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Next, I looked at the books he was assigning us: Of Mice and Men (46,750 words), The Bean Trees (58,000 words), Black Like Me (48,000 words), these books have an average of 50,916 words so we can calculate exactly how much better a movie is than these books:&lt;/p&gt;

&lt;p&gt;{% latex %}
\begin{align}
  1 \text{ book} &amp;amp;= 50,916 \text{ words} &lt;br /&gt;
  1 \text{ movie} &amp;amp;= 2,160,000 \text{ words} &lt;br /&gt;
  1 \text{ movie} &amp;amp;= (2,160,000/50,916) \text{ books} = 42.42281 \text{ books}
\end{align}
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Therefore, 1 movie &amp;#8776; 42 books. I had fun abusing proverbs to prove a point, and the teacher was amused, recognizing the humor.&lt;/p&gt;

&lt;p&gt;I would like to help my son avoid some of the same mistakes I made and work hard where and when it matters. What&amp;rsquo;s ironic is that I worked hard on a pseudo-mathematical proof that movies are better than books, but I completely blew off my algebra homework.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XKCD 1277: Ayn Rand and Regular Expressions</title>
      <link>/blog/2013/10/14/xkcd-1277-ayn-rand-and-regular-expressions/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/10/14/xkcd-1277-ayn-rand-and-regular-expressions/</guid>
      <description>&lt;p&gt;Randall Munroe of XKCD is brilliant, today&amp;rsquo;s comic is no exception:&lt;/p&gt;

&lt;p&gt;{%img &lt;a href=&#34;http://imgs.xkcd.com/comics/ayn_random.png&#34;&gt;http://imgs.xkcd.com/comics/ayn_random.png&lt;/a&gt; %}&lt;/p&gt;

&lt;p&gt;While the Ayn Rand joke is amusing, the real clever joke in the alt text (that maddeningly disappears if you take too long to read)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a cavern deep below the Earth, Ayn Rand, Paul Ryan, Rand Paul, Ann Druyan, Paul Rudd, Alan Alda, and Duran Duran meet togther in the Secret Council of /(\b[plurandy]+\b ?){2}/i&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those not familiar with regular expressions, the end of that sentence might look like nonsense, but it encodes the (much more amusing) similarity between all those names:&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the list of names, assume they are in a file called &lt;code&gt;names&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat names
Ayn Rand
Paul Ryan
Rand Paul
Ann Druyan
Paul Rudd
Alan Alda
Duran Duran
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each of the names, set them to lower case, split up the characters, then sort and count occurences:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat names | xargs ruby -e &#39;puts ARGV.join.downcase.split(//)&#39; | sort | uniq -c
     15 a
      8 d
      5 l
     10 n
      3 p
      7 r
      7 u
      3 y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that there are only 8 unique characters in that list, in &lt;a href=&#34;http://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt; the syntax &lt;code&gt;[plurandy]&lt;/code&gt; means &amp;lsquo;match any character in the set &lt;code&gt;{p,l,u,r,a,n,d,y}&lt;/code&gt;&amp;lsquo;&lt;/p&gt;

&lt;p&gt;You can see in this diagram how the whole expression works:&lt;/p&gt;

&lt;p&gt;{% img &lt;a href=&#34;https://www.debuggex.com/i/CzkCTSvo1uBAYkyi.png&#34;&gt;https://www.debuggex.com/i/CzkCTSvo1uBAYkyi.png&lt;/a&gt; %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;/(\b[plurandy]+\b ?){2}/i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The character &lt;code&gt;\b&lt;/code&gt; matches a word boundary, which is a point between a word character and a non-word character, such as the point right before the beginning of the name, or after. The trailing &lt;code&gt;/i&lt;/code&gt; means case insensitive, the diagram explains the rest.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The above graphic is done in &lt;a href=&#34;https://www.debuggex.com/r/CzkCTSvo1uBAYkyi&#34;&gt;Debuggex&lt;/a&gt;, it is a fantastic tool for exploring and debugging regular expressions&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>