<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lesson on tlehman@home</title>
    <link>/categories/lesson/index.xml</link>
    <description>Recent content in Lesson on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/lesson/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reinventing the wheel: Or how I learned to stop coding and read the manpages</title>
      <link>/blog/2013/01/28/reinventing-the-wheel-or-how-i-learned-to-stop-coding-and-read-the-manpages/</link>
      <pubDate>Mon, 28 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/01/28/reinventing-the-wheel-or-how-i-learned-to-stop-coding-and-read-the-manpages/</guid>
      <description>&lt;p&gt;About a month ago I &lt;a href=&#34;/blog/2012/12/30/building-command-line-utilities-in-ruby-that-play-well-with-the-rest-of-the-unix-utilities/&#34;&gt;wrote about a command line utility&lt;/a&gt; I made that calculates word and character frequencies. It was packaged as a ruby gem and it interacted well with the Unix pipeline interface.&lt;/p&gt;

&lt;p&gt;Then, about 2 or 3 weeks later, I come across this post on Twitter:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;Show how many times each line in a sorted file is repeated: uniq -c&lt;/p&gt;&amp;mdash; Unix tool tip (@UnixToolTip) &lt;a href=&#34;https://twitter.com/UnixToolTip/status/292295351518498816&#34;&gt;January 18, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And I realized that I could construct a one-liner that does what my gem did. Probably faster too. I know about uniq and sort, and I&amp;rsquo;ve used awk a little bit, but am not really familiar with most of it&amp;rsquo;s capabilities.&lt;/p&gt;

&lt;p&gt;The two features I implemented in ruby were (1) counting word frequencies and (2) counting character frequencies. I defaulted everything to lower case and stripped out non-alphanumeric characters.&lt;/p&gt;

&lt;p&gt;Using @UnixToolTip&amp;rsquo;s suggestion of &lt;code&gt;uniq -c&lt;/code&gt;, I came up with this alternative:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for word in $(cat filename); do echo $word; done | sed &#39;s/[^a-zA-Z0-9]//g&#39; | tr &#39;[A-Z]&#39; &#39;[a-z]&#39; | sort | uniq -c | sort -nr | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This just outputs the file, splits everything up by whitespace, strips out anything that isn&amp;rsquo;t alphanumeric, then lowercases, sorts, and counts the number of repetitions using &lt;code&gt;uniq -c&lt;/code&gt;. The result of that is then sorted numerically, to get the most frequent items at the top of the output, and then displays just the top 10 lines using &lt;code&gt;head&lt;/code&gt;. There are some small numerical differences between this and my gem, and that is most likely because I split by word boundary in ruby, but split by whitespace on the bash one-liner.&lt;/p&gt;

&lt;p&gt;For the problem I was trying to solve, I could have saved some time by digging through the manpages instead of writing another gem. I did enjoy working with the Rubygems packaging system, but I am starting to think that was overkill.&lt;/p&gt;

&lt;p&gt;NOTE: For the character count feature, all I have to do is output one character per line, then I can insert that into the pipeline to get the desired output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(CONTENTS OF FILENAME, 1 CHARACTER PER LINE) | sed &#39;s/[^a-zA-Z0-9]//g&#39; | tr &#39;[A-Z]&#39; &#39;[a-z]&#39; | sort | uniq -c | sort -nr | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not sure how to do this at the moment, I think &lt;code&gt;awk&lt;/code&gt; can do it pretty simply, I&amp;rsquo;ll read the manpages, but for now I have to get to work.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>