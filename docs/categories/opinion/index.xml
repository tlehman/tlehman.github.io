<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opinion on tlehman@home</title>
    <link>/categories/opinion/index.xml</link>
    <description>Recent content in Opinion on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/opinion/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why I uninstalled Adblock plus</title>
      <link>/blog/2014/11/23/why-i-uninstalled-adblock-plus/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/11/23/why-i-uninstalled-adblock-plus/</guid>
      <description>

&lt;p&gt;The most common business models on the internet are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ad-supported free services (Google, Facebook, Twitter, etc.)&lt;/li&gt;
&lt;li&gt;freemium (reddit, Hulu, apps with in-app purchases, etc.)&lt;/li&gt;
&lt;li&gt;donation (Wikipedia, NPR, etc.)&lt;/li&gt;
&lt;li&gt;subscription (The Economist, Netflix, WSJ, NYTimes, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first type of business, the Google model, have been tremendously successful over the last 15 years or so. The users don&amp;rsquo;t have pay anything, and advertisers have a wealth of information to use to find better ways of serving ads. The obvious downside is that your activity is the product that is sold to the ad companies that partner with Google or Facebook. That information is also low-hanging fruit for government surveillance.&lt;/p&gt;

&lt;p&gt;Obviously, people want convenient services for free, but companies like Google and Facebook have enormous data centers and expensive engineers to pay for. So we have ads, it&amp;rsquo;s a reasonable tradeoff. I want free stuff too, but I understand that it will mean ads targeted at me, well-informed by my online activity. Many people don&amp;rsquo;t understand this tradeoff, and just think Google and Facebook magically work and keep their information private. The obvious solution if you want your online information private is to pay for services that don&amp;rsquo;t have to sell your information to advertisers. Another is to buy your own servers and host things yourself, and learn enough about cryptography to be able to keep it secure. Either way, it will cost money, since you are no longer benefiting from those ad-based subsidies.&lt;/p&gt;

&lt;p&gt;Personally, I hate almost all ads, but I understand why they are there, because I&amp;rsquo;m using Gmail, GovTrack, Twitter, etc. using up server resources without paying for it. For a long time, I&amp;rsquo;ve been using the Adblock plus browser plugin, and it blocks ads so I don&amp;rsquo;t have to look at them. About three months ago I changed my mind though, and it had to do with the reason I think voting is important.&lt;/p&gt;

&lt;h2 id=&#34;why-we-should-all-vote&#34;&gt;Why we should all vote&lt;/h2&gt;

&lt;p&gt;My thought process was as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;My individual vote will &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/research/published/probdecisive2.pdf&#34;&gt;almost certainly not change the outcome of an election&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I am equivalent to all citizens in terms of rights and responsibilities.&lt;/li&gt;
&lt;li&gt;Most of the population needs to vote in order for the policies and politicians to approximately represent us voters.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, it&amp;rsquo;s pretty clear that (3) is an extreme hypothetical, but it&amp;rsquo;s an important ideal to use when deciding how to behave as a civilized human (Kant called this the Categorical Imperative). From (2), I can conclude that if I am going to decide to do something, I need to consistently apply my reasoning to the whole population. Finally, if I use (1) to justify not voting, it follows by (2) that each citizen should not bother voting. If every citizen then decided not to vote, democracy wouldn&amp;rsquo;t work. Therefore, I will vote, an encourage others to follow suit.&lt;/p&gt;

&lt;p&gt;So what does voting have to do with Adblock?&lt;/p&gt;

&lt;h2 id=&#34;why-we-should-all-uninstall-adblock&#34;&gt;Why we should all uninstall adblock&lt;/h2&gt;

&lt;p&gt;The reason I see a related issue behind adblock and voting is that services like Gmail, Facebook and GovTrack require that most of their users see those ads, and occasionally follow them. And each individual user decides that they don&amp;rsquo;t want to look at ads, and that their own attempt to block ads aren&amp;rsquo;t going to bankrupt the companies behind them.&lt;/p&gt;

&lt;p&gt;The thought process behind it is very similiar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;My individual installation of adblock will almost certainly not bankrupt the company behind the site I&amp;rsquo;m using.&lt;/li&gt;
&lt;li&gt;I am equivalent to all users of the software service who are using it free of charge.&lt;/li&gt;
&lt;li&gt;Most of the userbase needs to see and interact with ads in order for the company to make money and continue existing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The similarity should be clear now. I personally don&amp;rsquo;t want ads, but I understand that if all Gmail and Facebook users blocked ads, Google and Facebook would have to change their services to a subscription model, and users would have to pay money to use them.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Either uninstall adblock (or whatever is used to block ads), or start paying. I was pleased to hear that Google is offering &lt;a href=&#34;http://www.independent.co.uk/life-style/gadgets-and-tech/google-launches-subscription-service-for-the-internet-to-replace-ad-revenue-online-9874758.html&#34;&gt;an alternative to ads&lt;/a&gt; where you pay a small monthly fee to have a totally ad-free Google experience. If you are on the internet, you are paying for electricity and the connection itself, so you can pay for the services you use. Otherwise, live with ads.&lt;/p&gt;

&lt;p&gt;NOTE: My site doesn&amp;rsquo;t have ads, nor does it cost to read it, it&amp;rsquo;s closer to a donation model, I pay a small fee to host the site, and I don&amp;rsquo;t expect people to pay me for it. However, it&amp;rsquo;s static content, so most of the computational work happens on the client site (handled by your browser). I do have a &lt;a href=&#34;https://onename.io/tlehman&#34;&gt;bitcoin donation address&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modular computing forever?</title>
      <link>/blog/2013/10/31/modular-computing-forever/</link>
      <pubDate>Thu, 31 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/10/31/modular-computing-forever/</guid>
      <description>&lt;p&gt;I remember building my first computer, I was about 14, I ordered my AMD Athlon XP processor, got a motherboard and case, keyboard, monitor, sound card, graphics card, etc. All that. Assembling it was straighforward, but configuring it was a challenge, getting GNU/Linux and Windows 2000 to dual boot, then getting drivers straight, setting up a shared partition for data sharing. It was rewarding to get it all up and running. I upgraded that computer piece by piece, getting a new graphics card, hard drive, keyboard/mouse, RAM, CPU and eventually a new motherboard.&lt;/p&gt;

&lt;p&gt;I had that computer all the way through high school and afterward, because the pieces used standard interfaces like PCI, AGP, Socket A, USB etc. I could replace individual components as I needed, without having to buy a whole new system. This was (and in my opinion is) what all hardware should aspire to. I define modularity not only by the ability to swap out components, but also to have components that are interoperable (e.g. my RAM works in an AMD or an Intel box).&lt;/p&gt;

&lt;p&gt;To me, it seems obvious that interoperability is ideal. It&amp;rsquo;s good for the consumer, but it makes sense why there are lots of proprietary connectors and non-interoperable devices, because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the standard must exist (e.g. USB, Socket A)&lt;/li&gt;
&lt;li&gt;the standard must have features that intersect with the goals of the device manufacturer (e.g. USB 2.0 is not fast enough for use with your main hard drive)&lt;/li&gt;
&lt;li&gt;the manufacturer must comply with the standard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another problem was explored in &lt;a href=&#34;http://xkcd.com/927/&#34;&gt;XKCD 927: Standards&lt;/a&gt;, there may be a standard, but it&amp;rsquo;s not unique, leading to fragmentation.&lt;/p&gt;

&lt;p&gt;Despite these challenges, modular personal computers exist. This ideal of modularity has not been realized very much in the mobile computer space though, tablets and phones are selling like crazy, and they all are more or less out-of-the-box, sealed devices with little hope of swapping out parts. iPhones, iPads, Nexus phones and tablets have difficult to replace batteries (usually voiding a warranty in the process). I&amp;rsquo;ve broken an iPhone 4 trying to replace the lock button, this is because the parts are too small. Also, none of the parts are interoperable, I couldn&amp;rsquo;t take a Nexus 4 battery and replace it with an iPhone 5 battery, for example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I would like to point out &lt;a href=&#34;http://www.ifixit.com/&#34;&gt;ifixit.com&lt;/a&gt;, they have great tutorials on fixing phones and tablets, and are a remedy to the current situation of devices that are difficult to work on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to complain though, I love iPhones, Nexus phones and tablets, they are compact, convenient and very useful for most of non-work related casual computing.&lt;/p&gt;

&lt;p&gt;I was naturally very excited to hear about Motorola Ara:&lt;/p&gt;

&lt;p&gt;{% img /images/blogimg/moto_ara.jpg %}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a project that aims to make a set of modular components that can be combined to build your own phone, and swap out parts as needed!&lt;/p&gt;

&lt;p&gt;I thought that this could be the beginning of a golden age of mobile computer interoperability, as consumers would flock to this platform because of the economic benefit of being able to replace parts as needed. I later realized this might be a fantasy, after reading a &lt;a href=&#34;http://jjcm.org/blog/mac_pros_and_modularity/&#34;&gt;good article by Jacob Miller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jacob argues that non-modularity is inevitable, for more than the four reasons I mentioned above, I urge you to read the article, it&amp;rsquo;s very well written and thoughtful, but until then I&amp;rsquo;ll include the quote that for me was an inflection point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Despite all these changes in speed, one thing has largely stayed nearly the same. &lt;strong&gt;The physical size of the interconnect is still limited not by our current technology, but by our ability as humans to line up copper connectors&lt;/strong&gt;. Right now the lane size for PCI Express is the exact same as it was back in 1993 when PCI was released - 1mm. Contrast that with the lane size in a modern day processor - currently 22nm. Eventually, we&amp;rsquo;re going to hit a limit with the amount of data that any individual lane can transfer (currently at a jaw dropping 1969MB/s with PCI-E v.4), simply because we can only bend the laws of physics so far. At that point, our only option to increase speed is going to be to add more lanes.&lt;/p&gt;

&lt;p&gt;At that point, modularity will begin to fail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;His article clarified a choice that hardware designers and manufacturers have to make, &lt;em&gt;increase speed and capacity while shrinking the device, or preserve the ability for humans to operate on the parts, and replace them as needed&lt;/em&gt;. On the iPhone side, the former was chosen, on the Motorola Ara side, the latter was chosen, and as a result, Ara phones will necessarily be bigger.&lt;/p&gt;

&lt;p&gt;As parts get smaller, the very ability for us humans to swap out those parts diminishes. Devices like the iPhone 4 and 5 are so compact that it&amp;rsquo;s just really hard to even get to the parts. This trend is likely to continue, and the preference for smaller devices may lead to the failure of Project Ara.&lt;/p&gt;

&lt;p&gt;I am going to give Ara a try, and I hope that it succeeds, but I no longer believe everyone will flock to it, because Apple, LG and Samsung will keep making smaller and smaller devices that sacrifice modularity.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spaces in filenames</title>
      <link>/blog/2012/10/29/spaces-in-filenames/</link>
      <pubDate>Mon, 29 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/10/29/spaces-in-filenames/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t like spaces in filenames. This trend started when I started playing with the command line on Linux
back when I was about 13. Working with the shell, each space had to be escaped, which is just enough of an
annoyance to warrant avoiding spaces altogether as a basic principle.&lt;/p&gt;

&lt;p&gt;I got to thinking about this recently when I tried to find out how I could get rid of the space in the name
of my Google Drive directory. I use both Dropbox and Google Drive, and as a package, I prefer Dropbox because
of their out-of-the-box Linux support. However, Google Drive allows for a smaller per-month charge, and at the
time of this post, the cost per byte is about the same between the two. Also, when you install Dropbox, you
don&amp;rsquo;t have a stupid space in the middle of the directory name!&lt;/p&gt;

&lt;p&gt;Out of curiosity, I did a little experiment to find out how steadfastly I had been applying my own principle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ &amp;gt; find Dropbox | wc -l
    9909
~ &amp;gt; find Dropbox | grep &amp;quot; &amp;quot; | wc -l
     834
~ &amp;gt; python -c &amp;quot;print(834.0/9909.0)&amp;quot;
0.084165909779
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, 8.4% of my file and directory names have spaces in them. Apparently, my four years of dropbox usage have
been rather unprincipled.&lt;/p&gt;

&lt;p&gt;Performing the same experiment on the Google Drive directory requires an extra step, since &amp;ldquo;Google Drive&amp;rdquo; is
the name of the root directory, I had to shave off that part using sed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ &amp;gt; find Google\ Drive | sed &#39;s/Google Drive\///g&#39; | wc -l
    2263
~ &amp;gt; find Google\ Drive | sed &#39;s/Google Drive\///g&#39; | grep &amp;quot; &amp;quot; | wc -l
      68
~ &amp;gt; python -c &amp;quot;print(68.0/2263.0)&amp;quot;
0.0300486080424
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, correcting for the root directory&amp;rsquo;s name, only 3% of the stuff in my Google Drive have spaces in the name.&lt;/p&gt;

&lt;p&gt;In practice, I only follow this principle about 92-97% of the time, I can improve on that with a simple script,
once I have it made, I&amp;rsquo;ll post it for others who agree about how files should be named.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why do we need more than one language?</title>
      <link>/blog/2012/09/26/why-do-we-need-more-than-one-language/</link>
      <pubDate>Wed, 26 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/09/26/why-do-we-need-more-than-one-language/</guid>
      <description>&lt;p&gt;My dad asked me an interesting question recently, &lt;em&gt;why do we need more than one programming language?&lt;/em&gt;. I gave a short answer: &lt;em&gt;we don&amp;rsquo;t&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And a long answer to a related question, &lt;em&gt;why are there so many programming languages?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have them anyway for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aesthetics (some people don&amp;rsquo;t like semicolons, case sensitivity, etc. (Lousy reason at face value, but I must say, reading code written in Ruby is usually much easier than reading code written in C++).&lt;/li&gt;
&lt;li&gt;Specialization vs. Generalization is an eternal struggle

&lt;ul&gt;
&lt;li&gt;SQL is very useful as it is focused on querying data, but it is too specialized to do anything like make a website or firmware for a phone.&lt;/li&gt;
&lt;li&gt;Lisp and Java are general purpose enough that you can do anything with them, but querying data using Java or Lisp is more work, since you have to set up the database connection and implement how the data is queried. In SQL, you just write the query and the database figures out the implementation details.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;why not?&lt;/em&gt; factor.

&lt;ul&gt;
&lt;li&gt;Case in point: &lt;a href=&#34;http://www.muppetlabs.com/~breadbox/bf/&#34;&gt;Brainfuck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Esperanto factor

&lt;ul&gt;
&lt;li&gt;Languages grow and adapt, and after a while, it gets out of control. Sometimes, people get together armed with decades of experience and skill and endeavor to create a language that makes coding easier, safer, and more fun.&lt;/li&gt;
&lt;li&gt;Case in point: &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; (some veteran C/C++/Java programmers at Google got together to create a new language that fixed some of the problems of the old languages, for example, when you create an array of integers in Go, all of them are set to zero initially, whereas in C++, the array is full of whatever happened to be in that memory last (garbage data)).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Empire factor

&lt;ul&gt;
&lt;li&gt;Apple doesn&amp;rsquo;t let you write Java on an iPhone, why? Because fuck you, we are Apple,  and we say you have to write Objective-C.&lt;/li&gt;
&lt;li&gt;Microsoft doesn&amp;rsquo;t let you write Java on the Windows phone, because they made C# which is totally not a direct copy of Java in every meaningful way. Totally not.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Features and Abstraction

&lt;ul&gt;
&lt;li&gt;C can do everything, but C++ was invented to make data and procedural abstraction more convenient.&lt;/li&gt;
&lt;li&gt;Java was invented to be a C++ replacement, where you didn&amp;rsquo;t have to manage your own memory.&lt;/li&gt;
&lt;li&gt;Lisp can do everything and it is a beautiful Platonic ideal. But, like set theory, when you have to get work done and you have a deadline, in an environment where you have little room to experiment, it&amp;rsquo;s more useful to use shortcuts and take pre-packaged libraries and frameworks and languages that happen to have those libraries and frameworks available.&lt;/li&gt;
&lt;li&gt;Perl, Python and Ruby all simplified a lot of the tasks that you could otherwise do in the other languages. This is due to the simpler syntax, lack of compile time, and ease of creating abstractions.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I think that the reasons we have so many languages are understandable. As nice as it would be to have a standard language, no language has arisen yet that would solve all the problems that software developers face, and even if it did, people would still make alternatives for reasons other than practicality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convention over configuration, unless those conventions don&#39;t make sense</title>
      <link>/blog/2012/07/31/convention-over-configuration-unless-those-conventions-dont-make-sense/</link>
      <pubDate>Tue, 31 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/07/31/convention-over-configuration-unless-those-conventions-dont-make-sense/</guid>
      <description>&lt;p&gt;Ruby on Rails is a so-called opinionated framework, this means that it bakes in a bunch of conventions for how applications should be built. By following these conventions, you can write less code, and make more software. This is great, unless some of those conventions depend on something inconsistent or irregular.&lt;/p&gt;

&lt;p&gt;One thing that is particularly inconsistent and irregular is the English
language. Do you remember the rule for &lt;strong&gt;I&lt;/strong&gt;s and &lt;strong&gt;E&lt;/strong&gt;s? &amp;ldquo;I before E &lt;em&gt;except&lt;/em&gt;
after C and &lt;em&gt;except&lt;/em&gt; after words &lt;em&gt;like&lt;/em&gt; neighbor and weigh&amp;hellip;&amp;ldquo;. This is
typical of the English language, exceptions abound. There is no
consistent rule we can give for combining the letters I and E in a
sentence.&lt;/p&gt;

&lt;p&gt;Similarly, pluralization follows no single scheme, there are words like
&amp;lsquo;chair&amp;rsquo; that are pluralized as &amp;lsquo;chairs&amp;rsquo;, and then there are words like
&amp;lsquo;sheep&amp;rsquo; that are their own plurals. Finally, there are words inherited
from Latin like cactus, which can be pluralized as &amp;lsquo;cactii&amp;rsquo; or
&amp;lsquo;cactuses&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;The reason I am bringing this up is that Ruby on Rails has a module
called &lt;code&gt;ActiveSupport::Inflector&lt;/code&gt; that has pluralization methods built
into it. One of the conventions used in rails applications is the
following: if you have a data model representing a &lt;code&gt;thing&lt;/code&gt;, then rails
generates a table in your database called &lt;code&gt;things&lt;/code&gt;, where each record in
the database represents a single &lt;code&gt;thing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The inflector module kicks in so that you don&amp;rsquo;t have to say what the
name of the table will be, rails takes care of that for you. This works
fine, most of the time. I recently had to fix an application that was
failing because it has ambiguous routes, that means that a route has
multiple possible controller actions it could trigger, this is not good,
hence the error. The culprit was a model called &lt;code&gt;series&lt;/code&gt;. When you
pluralize it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Inflector.pluralize(&amp;quot;series&amp;quot;)
 =&amp;gt; &amp;quot;series&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is the same word, this leads to ambiguous routes, since there
is a &lt;code&gt;series_path&lt;/code&gt; (singular) and &lt;code&gt;series_path&lt;/code&gt; (plural) that are
supposed to mean different things.&lt;/p&gt;

&lt;p&gt;This problem took me a few days to solve, and it would have been a
non-issue if I would just made my own database table names and route.
Not because my conventions are better, but simply because I would have
been forced to think about what things are called, instead of trusting
that the conventions of the framework will yield consistent results.&lt;/p&gt;

&lt;p&gt;I think that &amp;lsquo;convention over configuration&amp;rsquo; is a good idea, but only
when the conventions are logical and make sense. At the vary least,
there should be no ambiguities.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>