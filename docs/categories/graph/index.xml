<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on tlehman@home</title>
    <link>/categories/graph/index.xml</link>
    <description>Recent content in Graph on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/graph/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What languages fix: graphically</title>
      <link>/blog/2012/12/26/what-languages-fix-graphically/</link>
      <pubDate>Wed, 26 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/12/26/what-languages-fix-graphically/</guid>
      <description>&lt;p&gt;Paul Graham&amp;rsquo;s article &lt;a href=&#34;http://www.paulgraham.com/fix.html&#34;&gt;What languages fix&lt;/a&gt; is about Kevin Kelleher&amp;rsquo;s description of each programming language in terms of the problems with other languages that it fixes. I decided to make this into a graph where each node is a language, and the edge represents the relation &amp;ldquo;x fixes y&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Here is the list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Algol: Assembly language is too low-level.&lt;/li&gt;
&lt;li&gt;Pascal: Algol doesn&amp;rsquo;t have enough data types.&lt;/li&gt;
&lt;li&gt;Modula: Pascal is too wimpy for systems programming.&lt;/li&gt;
&lt;li&gt;Simula: Algol isn&amp;rsquo;t good enough at simulations.&lt;/li&gt;
&lt;li&gt;Smalltalk: Not everything in Simula is an object.&lt;/li&gt;
&lt;li&gt;Fortran: Assembly language is too low-level.&lt;/li&gt;
&lt;li&gt;Cobol: Fortran is scary.&lt;/li&gt;
&lt;li&gt;PL/1: Fortran doesn&amp;rsquo;t have enough data types.&lt;/li&gt;
&lt;li&gt;Ada: Every existing language is missing something.&lt;/li&gt;
&lt;li&gt;Basic: Fortran is scary.&lt;/li&gt;
&lt;li&gt;APL: Fortran isn&amp;rsquo;t good enough at manipulating arrays.&lt;/li&gt;
&lt;li&gt;J: APL requires its own character set.&lt;/li&gt;
&lt;li&gt;C: Assemby language is too low-level.&lt;/li&gt;
&lt;li&gt;C++: C is too low-level.&lt;/li&gt;
&lt;li&gt;Java: C++ is a kludge. And Microsoft is going to crush us.&lt;/li&gt;
&lt;li&gt;C#: Java is controlled by Sun.&lt;/li&gt;
&lt;li&gt;Lisp: Turing Machines are an awkward way to describe computation.&lt;/li&gt;
&lt;li&gt;Scheme: MacLisp is a kludge.&lt;/li&gt;
&lt;li&gt;T: Scheme has no libraries.&lt;/li&gt;
&lt;li&gt;Common Lisp: There are too many dialects of Lisp.&lt;/li&gt;
&lt;li&gt;Dylan: Scheme has no libraries, and Lisp syntax is scary.&lt;/li&gt;
&lt;li&gt;Perl: Shell scripts/awk/sed are not enough like programming languages.&lt;/li&gt;
&lt;li&gt;Python: Perl is a kludge.&lt;/li&gt;
&lt;li&gt;Ruby: Perl is a kludge, and Lisp syntax is scary.&lt;/li&gt;
&lt;li&gt;Prolog: Programming is not enough like logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I put the above text into a file called &amp;lsquo;fix.txt&amp;rsquo; and then wrote the following ruby code to convert it into a directed graph in the DOT language:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# make a graph of language solutions (inspired by: http://www.paulgraham.com/fix.html)

fixes = File.open(&#39;fix.txt&#39;).read.split(&amp;quot;\n&amp;quot;)

fixes.each do |fix|
  language = fix.split(&amp;quot;:&amp;quot;).first
  /\:(?&amp;lt;fixed&amp;gt;.*)\b(is(n&#39;t)?|are|doesn&#39;t)\b/ =~ fix
  puts &amp;quot;#{language} -&amp;gt; #{fixed} [label=\&amp;quot;fixes\&amp;quot;]&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to tweak the output a bit, but the final result is a very nice summation of Kelleher&amp;rsquo;s list:
&lt;a href=&#34;/images/blogimg/lang_fixes.png&#34;&gt;&lt;img src=&#34;/images/blogimg/lang_fixes.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unix Processes and Their Parents Part 2</title>
      <link>/blog/2012/10/28/unix-processes-and-their-parents-part-2/</link>
      <pubDate>Sun, 28 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/10/28/unix-processes-and-their-parents-part-2/</guid>
      <description>&lt;p&gt;Based on a comment by Mark Essel from &lt;a href=&#34;/blog/2012/10/14/unix-processes-and-their-parents/&#34;&gt;part 1&lt;/a&gt; I have been trying
to add more metadata to the process tree. I have given up on doing it in a one-liner, so I started using bash scripts.&lt;/p&gt;

&lt;p&gt;Then, after a few hours of hacking bash, I got annoyed with the difficulty of very basic things such as incrementing
integers and dealing with collections, so I switched over to Ruby, with some minor shelling out.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&#34;https://github.com/tlehman/procviz&#34;&gt;procviz&lt;/a&gt;, it is some ruby code for generating a graph representing
the process tree at the time &lt;code&gt;Graph.new&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;It generates DOT files just fine, but the images can get big if your system has a lot of stuff running. Also, the only
metadata I have attached to the nodes so far is the command name:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/images/blogimg/proc_with_names.png&#34;&gt;
  &lt;img src=&#34;/images/blogimg/proc_with_names.png&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to make this into a more interactive visualization, but so far I have had a hard time getting Sigma.js or Arbor.js
to embed into this Octopress blog. I have been meaning to get a better understanding of javascript.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Unix processes and their parents</title>
      <link>/blog/2012/10/14/unix-processes-and-their-parents/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/10/14/unix-processes-and-their-parents/</guid>
      <description>&lt;p&gt;I am reading Jesse Storimer&amp;rsquo;s fantastic little book &lt;a href=&#34;http://workingwithunixprocesses.com/&#34;&gt;&amp;ldquo;Working with Unix Processes&amp;rdquo;&lt;/a&gt; right now, and inspiration struck after the second chapter &amp;ldquo;Processes Have Parents&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When a Unix process is born, it is a literal copy of it&amp;rsquo;s parent process. For example, if I am typing &lt;em&gt;ls&lt;/em&gt; into a bash prompt, the bash process spawns a copy of itself using the &lt;em&gt;fork&lt;/em&gt; system call. The parent process (bash) has an id which is associated with the child process (ls). Using the Unix &lt;em&gt;ps&lt;/em&gt; command, you can see the parent process id of every process on the system.&lt;/p&gt;

&lt;p&gt;The only process that has no parent is &lt;em&gt;sched&lt;/em&gt;, it has process id zero. The idea I had was to make a visualization of this branching tree of Unix processes. I am currently running Debian GNU/Linux, a Unix-like operating system. I came up with this one-liner that shows the (parent id -&amp;gt; child id) relation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot; | grep -v &amp;quot;PID&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part calls &lt;em&gt;ps&lt;/em&gt; and gets all process ids, and their parents. Some sample output is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ &amp;gt; ps axo ppid,pid
 PPID   PID
    0     1
    0     2
    2     3
    2     6
    2     7
    2     8
    2    10
    2    12
    2    13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This output is piped into &lt;em&gt;sed&lt;/em&gt; (*s*tream *ed*itor), and the empty space between the numbers is replaced with an arrow &amp;ldquo;-&amp;gt;&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ &amp;gt; ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot;
 PPID -&amp;gt;   PID
    0 -&amp;gt;     1
    0 -&amp;gt;     2
    2 -&amp;gt;     3
    2 -&amp;gt;     6
    2 -&amp;gt;     7
    2 -&amp;gt;     8
    2 -&amp;gt;    10
    2 -&amp;gt;    12
    2 -&amp;gt;    13
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PPID is Parent Process Id, and PID is just Process Id. Finally, I use &lt;em&gt;grep -v &amp;ldquo;PID&amp;rdquo;&lt;/em&gt; to let all the lines through that don&amp;rsquo;t contain &amp;ldquo;PID&amp;rdquo;. This selects those lines that are actual process relations.&lt;/p&gt;

&lt;p&gt;In this case, it just chops off the first line. Next, I wanted to convert this into a file that I can feed into &lt;a href=&#34;http://www.graphviz.org/&#34;&gt;GraphViz&lt;/a&gt;, an open source graph visualization tool. The format is pretty simple, an example is in order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;digraph Foo {
  1 -&amp;gt; 2
  1 -&amp;gt; 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above file defines a graph called &amp;ldquo;Foo&amp;rdquo; that has three nodes and two edges, it looks like this:&lt;/p&gt;

&lt;p&gt;{% img /images/blogimg/Foo.png %}&lt;/p&gt;

&lt;p&gt;Now, all we have to do to the PPID-&amp;gt;PID output above is to wrap it in braces and prepend two words to the beginning.&lt;/p&gt;

&lt;p&gt;We can use &lt;em&gt;echo &amp;ldquo;digraph proc { SOME COMMAND }&amp;rdquo;&lt;/em&gt; to wrap the output of our command, then dump the results in a file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &amp;quot;digraph proc { `ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot; | grep -v &amp;quot;PID&amp;quot;` } &amp;quot; &amp;gt;&amp;gt; proc.dot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, GraphViz has several commands for rendering graphs in various ways. The first thing I tried was a symmetric layout, but that produced a hierarchical, &lt;em&gt;very wide&lt;/em&gt; image. So I tryed &lt;em&gt;circo&lt;/em&gt; which produces a radial layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~ &amp;gt; echo &amp;quot;digraph proc { `ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot; | grep -v &amp;quot;PID&amp;quot;` } &amp;quot; &amp;gt;&amp;gt; proc.dot
~ &amp;gt; circo proc.dot -Tpng &amp;gt;&amp;gt; radial_proc.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the radial layout:
{% img /images/blogimg/radial_proc.png %}&lt;/p&gt;

&lt;p&gt;You can see the original ancestor of all processes, &lt;em&gt;sched&lt;/em&gt; with PID 0 right in the center, then PID 1 which is called &lt;em&gt;init&lt;/em&gt; has a bunch of children. I am writing this post in vim in a bash shell in a gnome terminal emulator, the vim PID is 14819, but it is hard to see in this image, there is too much overlap.&lt;/p&gt;

&lt;p&gt;Fortunately, we can modify the proc.dot file and include &lt;em&gt;overlap=false&lt;/em&gt; right above the PPID-&amp;gt;PID pairs. Also, I found from the man pages for the graphviz tools that the &lt;em&gt;splines=true&lt;/em&gt; option will draw the edges as splines (curves) instead of straight lines. Also, instead of using &lt;em&gt;circo&lt;/em&gt;, there is another tool called &lt;em&gt;neato&lt;/em&gt; that will render a more symmetrical graph than circo.&lt;/p&gt;

&lt;p&gt;This rendering took &lt;em&gt;much&lt;/em&gt; longer than circo rendering, but is much nicer (click to enlarge):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/images/blogimg/sym_proc.png&#34;&gt;
  &lt;img src=&#34;/images/blogimg/sym_proc.png&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I remember learning in my C programming class that Unix processes all had to be made with fork. It reminded me of asexual reproduction where two identical copies are made. I look forward to learning more about the Unix process model, and recommend Jesse&amp;rsquo;s book.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>