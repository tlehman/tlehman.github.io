<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on tlehman@home</title>
    <link>/categories/algorithms/index.xml</link>
    <description>Recent content in Algorithms on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Making a Go Game for the Web</title>
      <link>/blog/2015/11/03/making-a-go-game-for-the-web/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/11/03/making-a-go-game-for-the-web/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been feeling productive in the last few weeks. I just finished two Coursera classes, one in machine learning and one in Swift programming. I also finished my minimum viable go game: &lt;a href=&#34;http://goga.me&#34;&gt;goga.me&lt;/a&gt;. And we are working on a really exciting feature at work. I really like having lots of interesting things to work on. Anyway, enough feelings, you came here for games and code.&lt;/p&gt;

&lt;p&gt;The game of Go is ancient, it has very few rules, but an unfathomable level of complexity emerges from all the possible ways the pieces can be put on the board. The graphics were very straightforward to implement, it&amp;rsquo;s just a square grid with some colored circles, I don&amp;rsquo;t usually work with graphics, so I experimented with some different web technologies to see what worked best.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/blogimg/gogame_screenshot_0.png&#34; alt=&#34;example go game&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;attempt-1-html5-canvas&#34;&gt;Attempt 1, HTML5 Canvas&lt;/h2&gt;

&lt;p&gt;About a year ago I wrote a Go board using the HTML5 &amp;lt;canvas&amp;gt; element, &lt;a href=&#34;https://github.com/tlehman/go-websocket/blob/master/go_game.js&#34;&gt;here&amp;rsquo;s the source code&lt;/a&gt;, it doesn&amp;rsquo;t actually have a server side, I decided to ditch that approach, since canvas is really great for making arbitrarily complicated bitmap graphics, but I needed something much simpler. Also, when zooming in on a phone, the click event location was not the same as the location where the code drew a new piece.&lt;/p&gt;

&lt;h2 id=&#34;attempt-2-svg&#34;&gt;Attempt 2, SVG&lt;/h2&gt;

&lt;p&gt;After almost a year I came back to the project, I wrote out a rails backend for the data storage and game logic, and then learned SVG (Scalable Vector Graphics). Here&amp;rsquo;s &lt;a href=&#34;https://github.com/tlehman/goga.me/blob/b585f4dec45d726615d73fca301c261d2df17167/app/views/matches/show.html.erb&#34;&gt;the source code&lt;/a&gt;, what I like about SVG is that I can make the board positions part of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Document_Object_Model&#34;&gt;DOM&lt;/a&gt; and bind javascript events to the positions. This solves a problem with zooming, so that when I zoom in on a phone, the click event shows up in the right position.&lt;/p&gt;

&lt;h2 id=&#34;websockets-enabling-live-back-and-forth-gameplay&#34;&gt;WebSockets, enabling live back and forth gameplay&lt;/h2&gt;

&lt;p&gt;Another exciting technology that I spent some time learning about was &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&#34;&gt;WebSockets&lt;/a&gt;, this allows two players to open a direct connection to one another, so that as soon as someone plays a piece, the other one knows. This way, the user does not have to refresh, it&amp;rsquo;s all live. I used the websockets-rails library to handle setting up a user-to-user connection through the rails backend. The &lt;a href=&#34;https://github.com/tlehman/goga.me/blob/master/app/views/matches/show.html.erb#L67-L80&#34;&gt;source code to handle binding and triggering is here&lt;/a&gt;. To see it in action, &lt;a href=&#34;http://goga.me/users/sign_up&#34;&gt;make an account at goga.me&lt;/a&gt;, and then &lt;a href=&#34;http://goga.me/matches/new&#34;&gt;create a match&lt;/a&gt;, and click &amp;lsquo;Start Match&amp;rsquo;, that will start a match against yourself, you can open it up on multiple devices, and when you start playing, the other screen will immediately update, it&amp;rsquo;s pretty cool!&lt;/p&gt;

&lt;h2 id=&#34;other-challenges&#34;&gt;Other challenges&lt;/h2&gt;

&lt;p&gt;After getting the graphics and networking to work correctly, the only other major challenge was handling capturing. Capturing is where one color completely surrounds the other color, and the surrounded pieces get removed, you can see it in the following screen capture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/blogimg/gogame_capturing.gif&#34; alt=&#34;example capturing in a go game&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The challenge is to determine the parts of the board that are connected. Since each piece can only be connected to it&amp;rsquo;s four neighboring pieces of the same color, you can start finding connected components by picking a point and walking to every piece connected to it that is the same color. A prime choice for this problem is a breadth first search:&lt;/p&gt;

&lt;h2 id=&#34;breadth-first-search&#34;&gt;Breadth First Search&lt;/h2&gt;

&lt;p&gt;To wrap my head around this algorithm I had to get out my trusty graph theory book. Here&amp;rsquo;s a summary of the algorithm and an example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;: An unweighted graph and a start vertex u&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maintain a set R of vertices that have been reached but not searched and&lt;/li&gt;
&lt;li&gt;a set S of vertices that have been searched.&lt;/li&gt;
&lt;li&gt;The set R is maintained as a First-In First-Out list (&lt;a href=&#34;https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29&#34;&gt;queue&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: R = {u}, S = ø, d(u,u) = 0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iteration&lt;/strong&gt;: As long as R &amp;neq; ø, we search from the first vertex v of R. The neighbors of v not in (S U R) are added to the back of R and then v is removed from the front of R and placed in S.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Let G be the adjacency graph of the following Go shape:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   1  2  3  4  5  6
 1    .  o  o  o  .
 2    .  .  .  .  .  &amp;lt;--- black component
 3    .
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;S&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(2,1)&lt;/td&gt;
&lt;td&gt;[(2,1)]&lt;/td&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(2,1)&lt;/td&gt;
&lt;td&gt;[(2,2)]&lt;/td&gt;
&lt;td&gt;{(2,1)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(2,2)&lt;/td&gt;
&lt;td&gt;[(2,3),(3,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(2,3)&lt;/td&gt;
&lt;td&gt;[(3,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(3,2)&lt;/td&gt;
&lt;td&gt;[(4,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(4,2)&lt;/td&gt;
&lt;td&gt;[(5,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(5,2)&lt;/td&gt;
&lt;td&gt;[(6,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2),(5,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(6,2)&lt;/td&gt;
&lt;td&gt;[(6,1)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2),(5,2),(6,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(6,1)&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2),(5,2),(6,2),(6,1)}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Once I worked through the steps with this example and several others, writing the code to implement it was very straightforward, here&amp;rsquo;s the &lt;a href=&#34;https://github.com/tlehman/go-websocket/blob/8094890048ca845c0fef416573b8aba533ca6ea9/jasmine/src/ComponentMap.js#L16-L51&#34;&gt;javascript version&lt;/a&gt; and the &lt;a href=&#34;https://github.com/tlehman/goga.me/blob/b585f4dec45d726615d73fca301c261d2df17167/app/presenters/board_presenter.rb#L24-L41&#34;&gt;ruby version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My go game is at a good stopping point for now, I still need to fix a few edge cases and add a chat feature. Also, I realized how satisfying it is to take a bunch of stuff I learned and make something real with it. I plan on making a native mobile client to this (iOS and Android), but that will take some more time and work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Euclid&#39;s Algorithm in MIX assembly language vs Scheme</title>
      <link>/blog/2013/09/29/euclid-gcd-algorithm-in-mix-assembly-language-vs-scheme/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/29/euclid-gcd-algorithm-in-mix-assembly-language-vs-scheme/</guid>
      <description>&lt;p&gt;I wrote my first assembly language program today, it was written in
&lt;a href=&#34;https://en.wikipedia.org/wiki/MIX&#34;&gt;Donald Knuth&amp;rsquo;s MIX Assembly
Language&lt;/a&gt;. Technically I&amp;rsquo;ve written
some x86 assembly in a class in 2009, but it doesn&amp;rsquo;t count, it wasn&amp;rsquo;t
a complete program, and I barely understood it.&lt;/p&gt;

&lt;p&gt;It is an implementation of Euclid&amp;rsquo;s Algorithm to compute the greatest common divisor of two
positive integers. Writing in an assembly language is so much more
work than writing in a high-level language like Ruby, Scheme or even
C. However, it gives a much better idea of how the computer actually
works, and gives the programmer much more appreciation for all the
nice abstractions we use in our day jobs and side projects.&lt;/p&gt;

&lt;p&gt;The algorithm is the first example mentioned in &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&#34;&gt;The Art of Computer Programming&lt;/a&gt;.
I found that just reading the algorithm
alone doesn&amp;rsquo;t give much insight as to why it works, but reviewing a
little bit of discrete math first, one can see where the steps come
from.&lt;/p&gt;

&lt;p&gt;First, start by assuming that m and n are positive integers, with m &amp;gt;
n, and then the greatest common divisor d is the unique smallest integer such that:&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \exists a,b \in \mathbb{Z} : am + bn = d  $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Then, let r = m mod n (the remainder of m divided by n), we will prove
that&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \gcd(m,n) = \gcd(n,r) $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;All we need to show is that there are integers s and t such that&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ sn + tr = d  $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Note that since r = m mod n, it follows that r - m is a multiple of n,
this means:&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \exists k \in \mathbb{Z} \text{ such that }  r-m = kn $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Now, we take the integers a,b in the definition of gcd(m,n) above and
add -ar to both sides of the equation:&lt;/p&gt;

&lt;p&gt;{% latex %}
\begin{align}
   am + bn &amp;amp; = d \newline
\ am - ar + bn &amp;amp; = d - ar&lt;br /&gt;
\ a(m - r) + bn &amp;amp; = d - ar
\ kn + bn &amp;amp; = d - ar&lt;br /&gt;
\ (k + b)n &amp;amp; = d - ar&lt;br /&gt;
\ (k + b)n + ar &amp;amp; = d&lt;br /&gt;
\end{align}&lt;/p&gt;

&lt;p&gt;{% endlatex %}&lt;/p&gt;

&lt;p&gt;It is clear from the last equation above that s = (k+b) and t = a,
which completes the proof.&lt;/p&gt;

&lt;p&gt;Since gcd(m,n)=gcd(n,r), and r has the property that 0 &amp;le; r &amp;lt; n,
we can reduce the problem to a smaller problem, and since the previous
inequality always holds, it follows that r will eventually be 0, in
which case n is the greatest common divisor.&lt;/p&gt;

&lt;p&gt;This recursive form is very naturally captured in Scheme,
Here&amp;rsquo;s the Scheme version (problem 2.01 in SICP):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define (gcd m n)
  (if (= n 0)
      m
      (gcd n (remainder m n))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To implement the same algorithm in MIX assembly language, we need to
use much more primitive concepts. Firstly, we designate the X register
to hold the value of m, the I1 register to hold the value of n, and
proceed using the &lt;code&gt;DIV&lt;/code&gt; operation to find the remainder.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the MIX assembly language version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PRNT  EQU	19	* Typewriter terminal, stdout in MDK (GNU Mix Development Kit)
DVSR  EQU	100	* store n for DIV operation
SWAP  EQU	101	* swap to handle reg-to-reg transfers (inefficient)
START ENTA	0
      ENTX	165
      ENT1	90
E1    ST1	DVSR	* store n in DVSR
      DIV	DVSR	* rA &amp;lt;- m//n; rX &amp;lt;- m%n
E2    CMPX	=0=
      JE	QUIT	* halt if r=0, then CONTENTS(DVSOR)=gcd(m,n)
E3    STX	SWAP
      LD1	SWAP	* n &amp;lt;- r
      LDX	DVSR	* m &amp;lt;- n
      ENTA	0
      JMP	E1	* go to E1
QUIT  LDA	DVSR    * rA &amp;lt;- gcd(m,n)
      CHAR	0       * convert rA to character code
      STX	DVSR	* store least significant digits in DVSR cell
      OUT	DVSR(PRNT)
      HLT
      END	START
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I came up with the above code as an exercise in in MIX Assembly
Language so that I could better understand the algorithms in the book.
I have a hunch that it is not as efficient as it could be. I do a lot of
swapping from registers to memory and back. Although to be fair, I
couldn&amp;rsquo;t find a way to transfer data from a register to any of the other
registers (kind of like the &lt;a href=&#34;https://en.wikibooks.org/wiki/X86_Assembly/Data_Transfer#Move&#34;&gt;MOV instruction in x86&lt;/a&gt; ),
if someone knows of a way to do this, please correct me in
the comments, I would like to know.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>