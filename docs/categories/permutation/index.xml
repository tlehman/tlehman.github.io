<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Permutation on tlehman@home</title>
    <link>/categories/permutation/index.xml</link>
    <description>Recent content in Permutation on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/permutation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Anagrams of words in ruby</title>
      <link>/blog/2012/06/11/anagrams-of-words-in-ruby/</link>
      <pubDate>Mon, 11 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/06/11/anagrams-of-words-in-ruby/</guid>
      <description>&lt;p&gt;One thing that is nice about Ruby is the ability it gives you to peel open a class and stick new methods into an object or class while the program is running. As an example, we will use the Array#permutation method to implement an anagram method for any string. We start by opening up the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class String
  def anagram
    self.split(//).permutation.map { |a| a.join }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;self.split(//) just splits the string into an array of characters, then permutation returns the list of all permutations, and finally, the map { |a| a.join } expression just takes all permutations and joins the permuted characters into strings.&lt;/p&gt;

&lt;p&gt;Now, we can take a string such as “not” and call &amp;ldquo;not&amp;rdquo;.anagram, the output is then [&amp;ldquo;not&amp;rdquo;, &amp;ldquo;nto&amp;rdquo;, &amp;ldquo;ont&amp;rdquo;, &amp;ldquo;otn&amp;rdquo;, &amp;ldquo;tno&amp;rdquo;, &amp;ldquo;ton&amp;rdquo;].&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>