<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xkcd on tlehman@home</title>
    <link>/categories/xkcd/index.xml</link>
    <description>Recent content in Xkcd on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/xkcd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Thing explainer in emacs</title>
      <link>/blog/2016/04/13/thing-explainer-in-emacs/</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/2016/04/13/thing-explainer-in-emacs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/tlehman/etc/blob/master/common-words.el&#34;&gt;This&lt;/a&gt; is my first &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html&#34;&gt;major mode&lt;/a&gt; for emacs.
It was inspired by Randall Munroe&amp;rsquo;s &lt;a href=&#34;https://xkcd.com/thing-explainer/&#34;&gt;Thing Explainer&lt;/a&gt; and Morten Just&amp;rsquo;s &lt;a href=&#34;https://medium.com/@mortenjust/i-doomed-mankind-with-a-free-text-editor-ba6003319681#.utnh5bpjh&#34;&gt;editor that
doomed humanity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The concept is simple, restrict your vocabulary to the 1000 most common words. If you can explain something using this
reduced vocabulary, then you really understand the topic. This is a decent test of understanding because it&amp;rsquo;s easy to
learn a word, and even use that word in the right context, but still have no idea how it relates to other things.&lt;/p&gt;

&lt;p&gt;This is not to say that specialized vocabulary is bad, it&amp;rsquo;s quite useful for communicating between people with a lot of
shared context. But when explaining things to people without that context, it&amp;rsquo;s important to be able to expand jargon words
into common words, even if it results in a larger, slightly less accurate version.&lt;/p&gt;

&lt;p&gt;Here is an animation of the editor mode in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/blogimg/common-word-mode.gif&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XKCD 1277: Ayn Rand and Regular Expressions</title>
      <link>/blog/2013/10/14/xkcd-1277-ayn-rand-and-regular-expressions/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/10/14/xkcd-1277-ayn-rand-and-regular-expressions/</guid>
      <description>&lt;p&gt;Randall Munroe of XKCD is brilliant, today&amp;rsquo;s comic is no exception:&lt;/p&gt;

&lt;p&gt;{%img &lt;a href=&#34;http://imgs.xkcd.com/comics/ayn_random.png&#34;&gt;http://imgs.xkcd.com/comics/ayn_random.png&lt;/a&gt; %}&lt;/p&gt;

&lt;p&gt;While the Ayn Rand joke is amusing, the real clever joke in the alt text (that maddeningly disappears if you take too long to read)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a cavern deep below the Earth, Ayn Rand, Paul Ryan, Rand Paul, Ann Druyan, Paul Rudd, Alan Alda, and Duran Duran meet togther in the Secret Council of /(\b[plurandy]+\b ?){2}/i&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those not familiar with regular expressions, the end of that sentence might look like nonsense, but it encodes the (much more amusing) similarity between all those names:&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the list of names, assume they are in a file called &lt;code&gt;names&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat names
Ayn Rand
Paul Ryan
Rand Paul
Ann Druyan
Paul Rudd
Alan Alda
Duran Duran
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each of the names, set them to lower case, split up the characters, then sort and count occurences:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat names | xargs ruby -e &#39;puts ARGV.join.downcase.split(//)&#39; | sort | uniq -c
     15 a
      8 d
      5 l
     10 n
      3 p
      7 r
      7 u
      3 y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that there are only 8 unique characters in that list, in &lt;a href=&#34;http://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt; the syntax &lt;code&gt;[plurandy]&lt;/code&gt; means &amp;lsquo;match any character in the set &lt;code&gt;{p,l,u,r,a,n,d,y}&lt;/code&gt;&amp;lsquo;&lt;/p&gt;

&lt;p&gt;You can see in this diagram how the whole expression works:&lt;/p&gt;

&lt;p&gt;{% img &lt;a href=&#34;https://www.debuggex.com/i/CzkCTSvo1uBAYkyi.png&#34;&gt;https://www.debuggex.com/i/CzkCTSvo1uBAYkyi.png&lt;/a&gt; %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;/(\b[plurandy]+\b ?){2}/i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The character &lt;code&gt;\b&lt;/code&gt; matches a word boundary, which is a point between a word character and a non-word character, such as the point right before the beginning of the name, or after. The trailing &lt;code&gt;/i&lt;/code&gt; means case insensitive, the diagram explains the rest.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The above graphic is done in &lt;a href=&#34;https://www.debuggex.com/r/CzkCTSvo1uBAYkyi&#34;&gt;Debuggex&lt;/a&gt;, it is a fantastic tool for exploring and debugging regular expressions&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>