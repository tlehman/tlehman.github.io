<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unix on tlehman@home</title>
    <link>/categories/unix/index.xml</link>
    <description>Recent content in Unix on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/unix/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bootstrapping most of a C dev environment</title>
      <link>/blog/2013/11/25/bootstrapping-most-of-a-c-dev-environment/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/11/25/bootstrapping-most-of-a-c-dev-environment/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve taken a break from SICP and TAOCP in order to get a good foundation in the &lt;a href=&#34;http://c2.com/cgi/wiki?CeeLanguage&#34;&gt;C programming language&lt;/a&gt;, I&amp;rsquo;m familiar with it, but that is not good enough. The reason is because C exposes a lot more about how the computer works, understanding it is an important first step in understanding computers. Steve Yegge said it well:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You just have to know C. Why? Because for all practical purposes, every computer in the world you&amp;rsquo;ll ever use is a von Neumann machine, and C is a lightweight, expressive syntax for the von Neumann machine&amp;rsquo;s capabilities.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The SICP world-view is from a parallel world of computing that grew from John McCarthy&amp;rsquo;s LISP. There were even alternatives to the von Neumann architecture (Lisp Machines) that were built, which natively ran Lisp.&lt;/p&gt;

&lt;p&gt;In the interest of &lt;a href=&#34;http://c2.com/cgi/wiki?ToGrok&#34;&gt;grokking&lt;/a&gt; computers (not just knowing how to put them together, configure and run scripts on them), I should really know C.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve started with the basic command line tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wc(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: &lt;code&gt;foo(n)&lt;/code&gt; means that the command &lt;code&gt;foo&lt;/code&gt; is on manpage section &lt;code&gt;n&lt;/code&gt;, to view the manpage, type &lt;code&gt;man n foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;cat(1)&lt;/code&gt;, it was a simple matter of using &lt;code&gt;read(2)&lt;/code&gt; and &lt;code&gt;write(2)&lt;/code&gt;, the only tricky thing is getting familiar with IO buffering, but other than that it&amp;rsquo;s trivial. After having written these tools, I&amp;rsquo;ve been using them to work on this code, so I would use my own &lt;code&gt;cat&lt;/code&gt; and my own &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;wc&lt;/code&gt; inspect the code I had just written, it was very rewarding.&lt;/p&gt;

&lt;p&gt;From there I decided I should go further and write an editor, I researched to find the simplest editor that was common on Unix-like systems. I didn&amp;rsquo;t have to look far to find &lt;a href=&#34;http://c2.com/cgi/wiki?EdIsTheStandardTextEditor&#34;&gt;ed&lt;/a&gt;, it is a line-based editor, and after spending 30 minutes learning how to use it, I found the commands similar vi or vim, except that I had to imagine the text, I couldn&amp;rsquo;t see it as I typed. Then I&amp;rsquo;ll need a shell, then a C compiler, then an operating system.&lt;/p&gt;

&lt;p&gt;I can probably handle a shell, but I&amp;rsquo;ll need to study a lot more before I put together a compiler and operating system.&lt;/p&gt;

&lt;p&gt;My long term goal is to be able to write a whole develpment environment from scratch. Since Unix-like systems are built from small pieces, it makes it reasonably feasible to do it piece by piece.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reinventing the wheel: Or how I learned to stop coding and read the manpages</title>
      <link>/blog/2013/01/28/reinventing-the-wheel-or-how-i-learned-to-stop-coding-and-read-the-manpages/</link>
      <pubDate>Mon, 28 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/01/28/reinventing-the-wheel-or-how-i-learned-to-stop-coding-and-read-the-manpages/</guid>
      <description>&lt;p&gt;About a month ago I &lt;a href=&#34;/blog/2012/12/30/building-command-line-utilities-in-ruby-that-play-well-with-the-rest-of-the-unix-utilities/&#34;&gt;wrote about a command line utility&lt;/a&gt; I made that calculates word and character frequencies. It was packaged as a ruby gem and it interacted well with the Unix pipeline interface.&lt;/p&gt;

&lt;p&gt;Then, about 2 or 3 weeks later, I come across this post on Twitter:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;Show how many times each line in a sorted file is repeated: uniq -c&lt;/p&gt;&amp;mdash; Unix tool tip (@UnixToolTip) &lt;a href=&#34;https://twitter.com/UnixToolTip/status/292295351518498816&#34;&gt;January 18, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And I realized that I could construct a one-liner that does what my gem did. Probably faster too. I know about uniq and sort, and I&amp;rsquo;ve used awk a little bit, but am not really familiar with most of it&amp;rsquo;s capabilities.&lt;/p&gt;

&lt;p&gt;The two features I implemented in ruby were (1) counting word frequencies and (2) counting character frequencies. I defaulted everything to lower case and stripped out non-alphanumeric characters.&lt;/p&gt;

&lt;p&gt;Using @UnixToolTip&amp;rsquo;s suggestion of &lt;code&gt;uniq -c&lt;/code&gt;, I came up with this alternative:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for word in $(cat filename); do echo $word; done | sed &#39;s/[^a-zA-Z0-9]//g&#39; | tr &#39;[A-Z]&#39; &#39;[a-z]&#39; | sort | uniq -c | sort -nr | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This just outputs the file, splits everything up by whitespace, strips out anything that isn&amp;rsquo;t alphanumeric, then lowercases, sorts, and counts the number of repetitions using &lt;code&gt;uniq -c&lt;/code&gt;. The result of that is then sorted numerically, to get the most frequent items at the top of the output, and then displays just the top 10 lines using &lt;code&gt;head&lt;/code&gt;. There are some small numerical differences between this and my gem, and that is most likely because I split by word boundary in ruby, but split by whitespace on the bash one-liner.&lt;/p&gt;

&lt;p&gt;For the problem I was trying to solve, I could have saved some time by digging through the manpages instead of writing another gem. I did enjoy working with the Rubygems packaging system, but I am starting to think that was overkill.&lt;/p&gt;

&lt;p&gt;NOTE: For the character count feature, all I have to do is output one character per line, then I can insert that into the pipeline to get the desired output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(CONTENTS OF FILENAME, 1 CHARACTER PER LINE) | sed &#39;s/[^a-zA-Z0-9]//g&#39; | tr &#39;[A-Z]&#39; &#39;[a-z]&#39; | sort | uniq -c | sort -nr | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not sure how to do this at the moment, I think &lt;code&gt;awk&lt;/code&gt; can do it pretty simply, I&amp;rsquo;ll read the manpages, but for now I have to get to work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building command line utilities in Ruby that play well with Unix</title>
      <link>/blog/2012/12/30/building-command-line-utilities-in-ruby-that-play-well-with-the-rest-of-the-unix-utilities/</link>
      <pubDate>Sun, 30 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/12/30/building-command-line-utilities-in-ruby-that-play-well-with-the-rest-of-the-unix-utilities/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Pipeline_%28Unix%29&#34;&gt;Unix pipeline&lt;/a&gt; is a beautiful thing, as long as Standard Input and Standard Output are handled correctly, programs can be kept small and predictable. Getting any sort of complex functionality is simply a matter of composing the appropriate command line utilties via the Unix pipeline.&lt;/p&gt;

&lt;p&gt;When taking &lt;a href=&#34;https://www.coursera.org/course/crypto&#34;&gt;Coursera&amp;rsquo;s Cryptography I class&lt;/a&gt;, I learned about how all substitution ciphers could be cracked using character frequency analysis. Basically, in English plaintext, there is a very non-uniform distribution over the alphabet, as you can see here:&lt;/p&gt;

&lt;p&gt;{% img &lt;a href=&#34;http://upload.wikimedia.org/wikipedia/commons/b/b0/English_letter_frequency_%28frequency%29.svg&#34;&gt;http://upload.wikimedia.org/wikipedia/commons/b/b0/English_letter_frequency_%28frequency%29.svg&lt;/a&gt; r%}&lt;/p&gt;

&lt;p&gt;Using this, no matter how you scramble up the alphabet, given enough ciphertext, you can use this distribution to figure out how the alphabet was scrambled.&lt;/p&gt;

&lt;p&gt;As I learned this, I wanted to test it on real data sets like Sherlock Holmes and Beowulf. There was a lot of English text, so I looked around for a command line utility that counted character or word frequency. I couldn&amp;rsquo;t find one, so I whipped together a ruby program.&lt;/p&gt;

&lt;p&gt;Aside from substitution ciphers, I like knowing word and character frequencies for other reasons, and I was a bit annoyed that such a thing didn&amp;rsquo;t exist, so I made one. Since I&amp;rsquo;ve been doing Ruby development for about a year, I thought it was about time to learn how ruby gems are born.&lt;/p&gt;

&lt;p&gt;Buildling a gem is very easy, one just has to run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; bundle gem foo
      create  foo/Gemfile
      create  foo/Rakefile
      create  foo/LICENSE.txt
      create  foo/README.md
      create  foo/.gitignore
      create  foo/foo.gemspec
      create  foo/lib/foo.rb
      create  foo/lib/foo/version.rb
Initializating git repo in /Users/tobi/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, cd into the &lt;code&gt;foo&lt;/code&gt; directory, hack away on the code, and then do a &lt;code&gt;rake release&lt;/code&gt;, which publishes to rubygems.org. Then, anyone else can just run &lt;code&gt;gem install foo&lt;/code&gt; and start using your program.&lt;/p&gt;

&lt;p&gt;I wrote a gem called wordfreq that computed the word or character frequencies (if the -c flag was given), this was a quick way to verify the distribution above for the alphabet.&lt;/p&gt;

&lt;p&gt;The thing I got hung up on was the Errno::EPIPE exception in Ruby. When I wrote wordfreq and then piped its output to &lt;code&gt;head&lt;/code&gt;, the Errno::EPIPE exception was thrown. I thought I was doing something wrong, but it turned out that I just needed to handle that exception, since utilities like &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; stop reading after 10 lines. When &lt;code&gt;head&lt;/code&gt; or &lt;code&gt;tail&lt;/code&gt; stops reading, Ruby throws an Errno::EPIPE exception. The way I solved the problem was to handle the Errno::EPIPE exception by breaking out of the main loop.&lt;/p&gt;

&lt;p&gt;Here is the github repository with the source code and documentation: &lt;a href=&#34;https://github.com/tlehman/wordfreq&#34;&gt;https://github.com/tlehman/wordfreq&lt;/a&gt;, or if you want to start using it, just run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install wordfreq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Publishing gems is very easy with Bundler, and it is a great way to make small command line utilities. But make sure you respond appropriately when pipes close, that way your command lime tool will mesh nicely with the rest of the Unix tools.&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jstorimer.com/2011/12/12/writing-ruby-scripts-that-respect-pipelines.html&#34;&gt;Writing Ruby Scripts That Respect Pipelines (J. Storimer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/aix/library/au-spunix_pipeviewer/&#34;&gt;Speaking Unix: Peering into Pipes (M. Streicher)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Unix end of times</title>
      <link>/blog/2012/12/20/unix-end-of-times/</link>
      <pubDate>Thu, 20 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/12/20/unix-end-of-times/</guid>
      <description>&lt;p&gt;A lot of people feared the year 2000 because the two digit year date rolled over from 99 to 00, which was believed to cause a lot of problems with time-dependent computer systems.&lt;/p&gt;

&lt;p&gt;Now (December 20, 2012), a few people fear the year 2012 because on December 21, the Mayan calendar rolls over from 12.19.19.19.19 to 13.0.0.0.0&lt;/p&gt;

&lt;p&gt;However, no one uses the Mayan calendar, so it&amp;rsquo;s silly to think it would have any impact. A much more plausible year to fear is 2038, because the majority of computers running the world are using Unix time, which is a 32-bit integer value that records the number of seconds that have passed since January 1, 1970. Since times before 1970 are negative, the integer value is signed, so only 31 bits are left to count time in the forward direction.&lt;/p&gt;

&lt;p&gt;So, 2&lt;sup&gt;31&lt;/sup&gt;-1 = 2,147,483,647 is the total number of seconds, or about 68 years, after that, the integer value will overflow and anything the computer is doing that depends on the monotonicity of time (that all times increase in value), will be invalid. This probably won&amp;rsquo;t be an issue, since it is easy to increase the data type so that time can increase without bound for much longer.&lt;/p&gt;

&lt;p&gt;The title of this is misleading, there will be no apocolypse, the standard will be updated and life will go on, just like it always does.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing spaces in filenames</title>
      <link>/blog/2012/11/19/fixing-spaces-in-filenames/</link>
      <pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/11/19/fixing-spaces-in-filenames/</guid>
      <description>&lt;p&gt;Sorry this has taken so long, I&amp;rsquo;ve been working on the &lt;a href=&#34;https://www.coursera.org/course/crypto&#34;&gt;Cryptography Coursera class&lt;/a&gt;,
to get rid of all spaces in all files below the current directory, the following bash script will do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for filename in $(find .); do
  newfilename=$(echo $filename | sed &#39;s/ /_/g&#39;); 
  mv $filename $newfilename
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Unix Processes and Their Parents Part 2</title>
      <link>/blog/2012/10/28/unix-processes-and-their-parents-part-2/</link>
      <pubDate>Sun, 28 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/10/28/unix-processes-and-their-parents-part-2/</guid>
      <description>&lt;p&gt;Based on a comment by Mark Essel from &lt;a href=&#34;/blog/2012/10/14/unix-processes-and-their-parents/&#34;&gt;part 1&lt;/a&gt; I have been trying
to add more metadata to the process tree. I have given up on doing it in a one-liner, so I started using bash scripts.&lt;/p&gt;

&lt;p&gt;Then, after a few hours of hacking bash, I got annoyed with the difficulty of very basic things such as incrementing
integers and dealing with collections, so I switched over to Ruby, with some minor shelling out.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&#34;https://github.com/tlehman/procviz&#34;&gt;procviz&lt;/a&gt;, it is some ruby code for generating a graph representing
the process tree at the time &lt;code&gt;Graph.new&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;It generates DOT files just fine, but the images can get big if your system has a lot of stuff running. Also, the only
metadata I have attached to the nodes so far is the command name:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/images/blogimg/proc_with_names.png&#34;&gt;
  &lt;img src=&#34;/images/blogimg/proc_with_names.png&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to make this into a more interactive visualization, but so far I have had a hard time getting Sigma.js or Arbor.js
to embed into this Octopress blog. I have been meaning to get a better understanding of javascript.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Unix processes and their parents</title>
      <link>/blog/2012/10/14/unix-processes-and-their-parents/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/10/14/unix-processes-and-their-parents/</guid>
      <description>&lt;p&gt;I am reading Jesse Storimer&amp;rsquo;s fantastic little book &lt;a href=&#34;http://workingwithunixprocesses.com/&#34;&gt;&amp;ldquo;Working with Unix Processes&amp;rdquo;&lt;/a&gt; right now, and inspiration struck after the second chapter &amp;ldquo;Processes Have Parents&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When a Unix process is born, it is a literal copy of it&amp;rsquo;s parent process. For example, if I am typing &lt;em&gt;ls&lt;/em&gt; into a bash prompt, the bash process spawns a copy of itself using the &lt;em&gt;fork&lt;/em&gt; system call. The parent process (bash) has an id which is associated with the child process (ls). Using the Unix &lt;em&gt;ps&lt;/em&gt; command, you can see the parent process id of every process on the system.&lt;/p&gt;

&lt;p&gt;The only process that has no parent is &lt;em&gt;sched&lt;/em&gt;, it has process id zero. The idea I had was to make a visualization of this branching tree of Unix processes. I am currently running Debian GNU/Linux, a Unix-like operating system. I came up with this one-liner that shows the (parent id -&amp;gt; child id) relation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot; | grep -v &amp;quot;PID&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part calls &lt;em&gt;ps&lt;/em&gt; and gets all process ids, and their parents. Some sample output is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ &amp;gt; ps axo ppid,pid
 PPID   PID
    0     1
    0     2
    2     3
    2     6
    2     7
    2     8
    2    10
    2    12
    2    13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This output is piped into &lt;em&gt;sed&lt;/em&gt; (*s*tream *ed*itor), and the empty space between the numbers is replaced with an arrow &amp;ldquo;-&amp;gt;&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ &amp;gt; ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot;
 PPID -&amp;gt;   PID
    0 -&amp;gt;     1
    0 -&amp;gt;     2
    2 -&amp;gt;     3
    2 -&amp;gt;     6
    2 -&amp;gt;     7
    2 -&amp;gt;     8
    2 -&amp;gt;    10
    2 -&amp;gt;    12
    2 -&amp;gt;    13
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PPID is Parent Process Id, and PID is just Process Id. Finally, I use &lt;em&gt;grep -v &amp;ldquo;PID&amp;rdquo;&lt;/em&gt; to let all the lines through that don&amp;rsquo;t contain &amp;ldquo;PID&amp;rdquo;. This selects those lines that are actual process relations.&lt;/p&gt;

&lt;p&gt;In this case, it just chops off the first line. Next, I wanted to convert this into a file that I can feed into &lt;a href=&#34;http://www.graphviz.org/&#34;&gt;GraphViz&lt;/a&gt;, an open source graph visualization tool. The format is pretty simple, an example is in order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;digraph Foo {
  1 -&amp;gt; 2
  1 -&amp;gt; 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above file defines a graph called &amp;ldquo;Foo&amp;rdquo; that has three nodes and two edges, it looks like this:&lt;/p&gt;

&lt;p&gt;{% img /images/blogimg/Foo.png %}&lt;/p&gt;

&lt;p&gt;Now, all we have to do to the PPID-&amp;gt;PID output above is to wrap it in braces and prepend two words to the beginning.&lt;/p&gt;

&lt;p&gt;We can use &lt;em&gt;echo &amp;ldquo;digraph proc { SOME COMMAND }&amp;rdquo;&lt;/em&gt; to wrap the output of our command, then dump the results in a file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &amp;quot;digraph proc { `ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot; | grep -v &amp;quot;PID&amp;quot;` } &amp;quot; &amp;gt;&amp;gt; proc.dot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, GraphViz has several commands for rendering graphs in various ways. The first thing I tried was a symmetric layout, but that produced a hierarchical, &lt;em&gt;very wide&lt;/em&gt; image. So I tryed &lt;em&gt;circo&lt;/em&gt; which produces a radial layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~ &amp;gt; echo &amp;quot;digraph proc { `ps axo ppid,pid | sed &amp;quot;s/\b / -&amp;gt; /g&amp;quot; | grep -v &amp;quot;PID&amp;quot;` } &amp;quot; &amp;gt;&amp;gt; proc.dot
~ &amp;gt; circo proc.dot -Tpng &amp;gt;&amp;gt; radial_proc.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the radial layout:
{% img /images/blogimg/radial_proc.png %}&lt;/p&gt;

&lt;p&gt;You can see the original ancestor of all processes, &lt;em&gt;sched&lt;/em&gt; with PID 0 right in the center, then PID 1 which is called &lt;em&gt;init&lt;/em&gt; has a bunch of children. I am writing this post in vim in a bash shell in a gnome terminal emulator, the vim PID is 14819, but it is hard to see in this image, there is too much overlap.&lt;/p&gt;

&lt;p&gt;Fortunately, we can modify the proc.dot file and include &lt;em&gt;overlap=false&lt;/em&gt; right above the PPID-&amp;gt;PID pairs. Also, I found from the man pages for the graphviz tools that the &lt;em&gt;splines=true&lt;/em&gt; option will draw the edges as splines (curves) instead of straight lines. Also, instead of using &lt;em&gt;circo&lt;/em&gt;, there is another tool called &lt;em&gt;neato&lt;/em&gt; that will render a more symmetrical graph than circo.&lt;/p&gt;

&lt;p&gt;This rendering took &lt;em&gt;much&lt;/em&gt; longer than circo rendering, but is much nicer (click to enlarge):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/images/blogimg/sym_proc.png&#34;&gt;
  &lt;img src=&#34;/images/blogimg/sym_proc.png&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I remember learning in my C programming class that Unix processes all had to be made with fork. It reminded me of asexual reproduction where two identical copies are made. I look forward to learning more about the Unix process model, and recommend Jesse&amp;rsquo;s book.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>