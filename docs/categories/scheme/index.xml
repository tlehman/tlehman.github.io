<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scheme on tlehman@home</title>
    <link>/categories/scheme/index.xml</link>
    <description>Recent content in Scheme on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/scheme/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Euclid&#39;s Algorithm in MIX assembly language vs Scheme</title>
      <link>/blog/2013/09/29/euclid-gcd-algorithm-in-mix-assembly-language-vs-scheme/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/29/euclid-gcd-algorithm-in-mix-assembly-language-vs-scheme/</guid>
      <description>&lt;p&gt;I wrote my first assembly language program today, it was written in
&lt;a href=&#34;https://en.wikipedia.org/wiki/MIX&#34;&gt;Donald Knuth&amp;rsquo;s MIX Assembly
Language&lt;/a&gt;. Technically I&amp;rsquo;ve written
some x86 assembly in a class in 2009, but it doesn&amp;rsquo;t count, it wasn&amp;rsquo;t
a complete program, and I barely understood it.&lt;/p&gt;

&lt;p&gt;It is an implementation of Euclid&amp;rsquo;s Algorithm to compute the greatest common divisor of two
positive integers. Writing in an assembly language is so much more
work than writing in a high-level language like Ruby, Scheme or even
C. However, it gives a much better idea of how the computer actually
works, and gives the programmer much more appreciation for all the
nice abstractions we use in our day jobs and side projects.&lt;/p&gt;

&lt;p&gt;The algorithm is the first example mentioned in &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&#34;&gt;The Art of Computer Programming&lt;/a&gt;.
I found that just reading the algorithm
alone doesn&amp;rsquo;t give much insight as to why it works, but reviewing a
little bit of discrete math first, one can see where the steps come
from.&lt;/p&gt;

&lt;p&gt;First, start by assuming that m and n are positive integers, with m &amp;gt;
n, and then the greatest common divisor d is the unique smallest integer such that:&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \exists a,b \in \mathbb{Z} : am + bn = d  $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Then, let r = m mod n (the remainder of m divided by n), we will prove
that&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \gcd(m,n) = \gcd(n,r) $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;All we need to show is that there are integers s and t such that&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ sn + tr = d  $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Note that since r = m mod n, it follows that r - m is a multiple of n,
this means:&lt;/p&gt;

&lt;p&gt;{% latex %}
  $ \exists k \in \mathbb{Z} \text{ such that }  r-m = kn $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Now, we take the integers a,b in the definition of gcd(m,n) above and
add -ar to both sides of the equation:&lt;/p&gt;

&lt;p&gt;{% latex %}
\begin{align}
   am + bn &amp;amp; = d \newline
\ am - ar + bn &amp;amp; = d - ar&lt;br /&gt;
\ a(m - r) + bn &amp;amp; = d - ar
\ kn + bn &amp;amp; = d - ar&lt;br /&gt;
\ (k + b)n &amp;amp; = d - ar&lt;br /&gt;
\ (k + b)n + ar &amp;amp; = d&lt;br /&gt;
\end{align}&lt;/p&gt;

&lt;p&gt;{% endlatex %}&lt;/p&gt;

&lt;p&gt;It is clear from the last equation above that s = (k+b) and t = a,
which completes the proof.&lt;/p&gt;

&lt;p&gt;Since gcd(m,n)=gcd(n,r), and r has the property that 0 &amp;le; r &amp;lt; n,
we can reduce the problem to a smaller problem, and since the previous
inequality always holds, it follows that r will eventually be 0, in
which case n is the greatest common divisor.&lt;/p&gt;

&lt;p&gt;This recursive form is very naturally captured in Scheme,
Here&amp;rsquo;s the Scheme version (problem 2.01 in SICP):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define (gcd m n)
  (if (= n 0)
      m
      (gcd n (remainder m n))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To implement the same algorithm in MIX assembly language, we need to
use much more primitive concepts. Firstly, we designate the X register
to hold the value of m, the I1 register to hold the value of n, and
proceed using the &lt;code&gt;DIV&lt;/code&gt; operation to find the remainder.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the MIX assembly language version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PRNT  EQU	19	* Typewriter terminal, stdout in MDK (GNU Mix Development Kit)
DVSR  EQU	100	* store n for DIV operation
SWAP  EQU	101	* swap to handle reg-to-reg transfers (inefficient)
START ENTA	0
      ENTX	165
      ENT1	90
E1    ST1	DVSR	* store n in DVSR
      DIV	DVSR	* rA &amp;lt;- m//n; rX &amp;lt;- m%n
E2    CMPX	=0=
      JE	QUIT	* halt if r=0, then CONTENTS(DVSOR)=gcd(m,n)
E3    STX	SWAP
      LD1	SWAP	* n &amp;lt;- r
      LDX	DVSR	* m &amp;lt;- n
      ENTA	0
      JMP	E1	* go to E1
QUIT  LDA	DVSR    * rA &amp;lt;- gcd(m,n)
      CHAR	0       * convert rA to character code
      STX	DVSR	* store least significant digits in DVSR cell
      OUT	DVSR(PRNT)
      HLT
      END	START
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I came up with the above code as an exercise in in MIX Assembly
Language so that I could better understand the algorithms in the book.
I have a hunch that it is not as efficient as it could be. I do a lot of
swapping from registers to memory and back. Although to be fair, I
couldn&amp;rsquo;t find a way to transfer data from a register to any of the other
registers (kind of like the &lt;a href=&#34;https://en.wikibooks.org/wiki/X86_Assembly/Data_Transfer#Move&#34;&gt;MOV instruction in x86&lt;/a&gt; ),
if someone knows of a way to do this, please correct me in
the comments, I would like to know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monoids in Scheme</title>
      <link>/blog/2013/09/07/monoids-in-scheme/</link>
      <pubDate>Sat, 07 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/07/monoids-in-scheme/</guid>
      <description>

&lt;p&gt;There is a structure in abstract algebra called a monoid. There are several ways to define a monoid, but before we start, we should answer the obvious question: &lt;em&gt;why should you care?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason being aware of monoids is important is that they are everywhere, and knowing the properties of general monoids will lead to better understanding of their specific manifestations, such as the accumulator pattern or string concatenation. I&amp;rsquo;ll give a good example to start out with: linked lists.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/blogimg/list.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, I am going to use scheme lists and the &lt;code&gt;append&lt;/code&gt; operation. In &lt;a href=&#34;https://mitpress.mit.edu/sicp/full-text/sicp/book/node32.html&#34;&gt;Section 2.2 of SICP&lt;/a&gt;, the closure property of was defined. &lt;em&gt;This is distinct from the notion of &lt;a href=&#34;http://stackoverflow.com/a/36639/46871&#34;&gt;closure&lt;/a&gt; of an expression over the surrounding environment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An operation &lt;code&gt;#&lt;/code&gt; is said to be &amp;lsquo;closed&amp;rsquo; in the sense that given two values &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; of the same type, the expression &lt;code&gt;A # B&lt;/code&gt; is a value of the same type. In scheme-like prefix notation, we would write &lt;code&gt;(# A B)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Given a list &lt;code&gt;A&lt;/code&gt; and a list &lt;code&gt;B&lt;/code&gt;, we can concatenate the two lists and get a new list, &lt;code&gt;(append A B)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(append (append &#39;(a) &#39;(b)) &#39;(c))
; =&amp;gt; (a b c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to construct it is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(append &#39;(a) (append &#39;(b) &#39;(c)))
; =&amp;gt; (a b c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fact that &lt;code&gt;(a b c)&lt;/code&gt; can be constructed in either way means that &lt;code&gt;append&lt;/code&gt; is an associative operation, and readers of this blog should recognize that &lt;a href=&#34;/blog/2013/09/02/quasiquoting-in-scheme-to-study-a-computation/&#34;&gt;&lt;code&gt;fold-left&lt;/code&gt; and &lt;code&gt;fold-right&lt;/code&gt; would give the same result in this case&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;set-theoretic-definition-of-a-monoid&#34;&gt;Set-theoretic Definition of a monoid&lt;/h2&gt;

&lt;p&gt;This leads to the first two properties that define a general monoid, a monoid is:&lt;/p&gt;

&lt;p&gt;{% latex %}
$ \text{a set } M \text{ with an associative operation } *:M \times M \to M $
{% endlatex %}&lt;/p&gt;

&lt;p&gt;Note: the closure property is implicit in the defintion of the operation as a function, since it is impossible for the output of the function to be anything outside of M.&lt;/p&gt;

&lt;p&gt;The set M has an identity element e in M, it is defined by:&lt;/p&gt;

&lt;p&gt;{% latex %}
$ \forall m \in M : e*m = m*e = m $
{% endlatex %}&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;From the three properties that define of monoids (closure, associativity, identity), we can prove the uniqueness of the identity element:&lt;/p&gt;

&lt;p&gt;Suppose &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are identity elements, then:&lt;/p&gt;

&lt;p&gt;{% latex %}&lt;/p&gt;

&lt;p&gt;$ a*b=b*a=b $&lt;/p&gt;

&lt;p&gt;$ b*a=a*b=a $&lt;/p&gt;

&lt;p&gt;$ a = b $&lt;/p&gt;

&lt;p&gt;{% endlatex %}&lt;/p&gt;

&lt;p&gt;This applies to all monoids, in our example, the set &lt;code&gt;M&lt;/code&gt; is the set of all Scheme lists, the operation is &lt;code&gt;append&lt;/code&gt;, and the unique identity element is the empty list.&lt;/p&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dan Piponi (SIGFPE) wrote &lt;a href=&#34;http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html&#34;&gt;a lot of good stuff about monoids in haskell&lt;/a&gt; at his blog &amp;lsquo;A Neighborhood of Infinity&lt;/li&gt;
&lt;li&gt;Pete Clark wrote &lt;a href=&#34;http://math.uga.edu/~pete/semigroup.pdf&#34;&gt;a good introduction to semigroups and monoids&lt;/a&gt; on his UGA website&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Quasiquoting in Scheme to study a computation</title>
      <link>/blog/2013/09/02/quasiquoting-in-scheme-to-study-a-computation/</link>
      <pubDate>Mon, 02 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/02/quasiquoting-in-scheme-to-study-a-computation/</guid>
      <description>&lt;p&gt;While working though &lt;a href=&#34;https://mitpress.mit.edu/sicp/&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;, I came across the definition of the &lt;code&gt;fold-right&lt;/code&gt; function:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exercise 2.38: The accumulate procedure is also known as fold-right,
because it combines the first element of the sequence with the
result of comining all the elements to the right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have trouble with purely verbal explanations of things, I prefer notation and diagrams whenever appropriate. In exercise 2.38, the authors give a definition of &lt;code&gt;fold-left&lt;/code&gt; in Scheme:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define (fold-left op init seq)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter init seq))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And using &lt;code&gt;fold-right&lt;/code&gt; (accumulate) from earlier in the text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define (fold-right op first list)
  (if (null? list)
      first
      (op (car list)
          (fold-right op first (cdr list)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To show that fold-left and fold-right are different, the authors ask for the values of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(fold-right / 1 (list 1 2 3))
; =&amp;gt; 3/2

(fold-left / 1 (list 1 2 3))
; =&amp;gt; 1/6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, that does not show &lt;em&gt;why&lt;/em&gt; they are different. To get a better understanding of why these functions are different, I used a feature of Scheme called quasiquoting, it&amp;rsquo;s similar to quoting, but allows for partial evaluation, I&amp;rsquo;ll explain with an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define a 2)

(square a)   ; value is 4             Evalutation
&#39;(square a)  ; value is (square a)    Quoting
`(square ,a) ; value is (square 2)    Quasiquoting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quoting returns the expression itself, not the value it evaulates to. Quasiquoting returns the expression itself, after evaluating all the expressions after commas.&lt;/p&gt;

&lt;p&gt;So, to study the &lt;code&gt;(fold-right / 1 (list 1 2 3))&lt;/code&gt; and &lt;code&gt;(fold-left / 1 (list 1 2 3))&lt;/code&gt; computations, we can redefine &lt;code&gt;/&lt;/code&gt; to use quasiquoting, and prevent the scheme interpreter from evaluating it all the way down to a number. Instead of &lt;code&gt;(/ 1 2)&lt;/code&gt; evaluating to &lt;code&gt;1/2&lt;/code&gt;, we want it to evaluate to &lt;code&gt;(/ 1 2)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define (/ x y) `(/ ,x ,y)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, recompute the values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(fold-right / 1 (list 1 2 3))
; =&amp;gt; (/ 1 (/ 2 (/ 3 1)))

(fold-left / 1 (list 1 2 3))
; =&amp;gt; (/ (/ (/ 1 1) 2) 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This expanded view makes it very clear how these functions are different. It also suggests that they are different only for non-associative operators.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;/blog/2013/04/07/visualization-of-sicp-exercise-1-dot-14#quasiquote&#34;&gt;another example of quasiquoting&lt;/a&gt; that is useful for visualizing the recursive structure of a computation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualization of SICP Exercise 1.14</title>
      <link>/blog/2013/04/07/visualization-of-sicp-exercise-1-dot-14/</link>
      <pubDate>Sun, 07 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/04/07/visualization-of-sicp-exercise-1-dot-14/</guid>
      <description>

&lt;p&gt;I am currently working my way the &lt;a href=&#34;https://github.com/tlehman/sicp-exercises#readme&#34;&gt;Structure and Interpretation of
Computer Programs&lt;/a&gt;
and I&amp;rsquo;ve skipped past exercise 1.14, and come back to it after a bit
of thinking, here&amp;rsquo;s the problem, and then the exercise.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;How many ways are there to make change of a given amount &lt;code&gt;a&lt;/code&gt; with the
following kinds of coins?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pennies&lt;/li&gt;
&lt;li&gt;nickels&lt;/li&gt;
&lt;li&gt;dimes&lt;/li&gt;
&lt;li&gt;quarters&lt;/li&gt;
&lt;li&gt;half-dollars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a recursive solution to this combinatorial problem, which can
readily be made into executable code in Scheme, this kind of solution
is very standard in enumerative combinatorics:&lt;/p&gt;

&lt;p&gt;The number of ways to change amount &lt;code&gt;a&lt;/code&gt; using &lt;code&gt;n&lt;/code&gt; kinds of coins
equals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the number of ways to change amount &lt;code&gt;a&lt;/code&gt; using all but the first
kind of coin, plus&lt;/li&gt;
&lt;li&gt;the number of ways to change amount &lt;code&gt;a - d&lt;/code&gt; using all &lt;code&gt;n&lt;/code&gt; kinds of
coins, where &lt;code&gt;d&lt;/code&gt; is the denomination of the first kind of coin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that those two items are mutually exclusive and exhaustive
conditions, so the result can be calculated by simply adding the two
values.&lt;/p&gt;

&lt;p&gt;In scheme, the above list could be transliterated as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;	(+ (cc a (- n 1))
	   (cc (- a d) n))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;(cc a n)&lt;/code&gt; computes the number of ways of changing amount &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt;
kinds of coins.&lt;/p&gt;

&lt;p&gt;The full code for the &lt;code&gt;count-change&lt;/code&gt; procedure can be found
&lt;a href=&#34;https://github.com/tlehman/sicp-exercises/blob/master/count-change.scm#L3&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-exercise&#34;&gt;The Exercise&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;count-change&lt;/code&gt; procedure at hand, Exercise 1.14 is to &amp;ldquo;draw
the tree illustrating the process generated by the &lt;code&gt;count-change&lt;/code&gt;
procedure in making change for 11 cents.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;count-change&lt;/code&gt; procedure uses the &lt;code&gt;(cc a n)&lt;/code&gt; procedure where
&lt;code&gt;n = 5&lt;/code&gt;, and the &lt;code&gt;cc&lt;/code&gt; procedure naturally gives rise to a binary
tree that locally looks like this:&lt;/p&gt;

&lt;p&gt;{% img /images/blogimg/ccan.png %}&lt;/p&gt;

&lt;p&gt;I prefer to make the computer go through all the steps and produce an
image for me, so I took a break on 1.14 and thought about it for a
while.&lt;/p&gt;

&lt;p&gt;To represent the tree, I used the graph-description language
&lt;a href=&#34;http://www.graphviz.org/pub/scm/graphviz2/doc/info/lang.html&#34;&gt;DOT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To generate the tree, I started by adding a print statement around the
recursion steps, the problem with that is that there can be distinct
nodes that happen to have the same argument values, that is, the node
in the tree may be labeled &lt;code&gt;(cc a n)&lt;/code&gt;, but there may also be multiple
nodes with the same &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; values. To avoid this, each node must
be given a unique id, and then be displayed with the &lt;code&gt;(cc a n)&lt;/code&gt; label.&lt;/p&gt;

&lt;p&gt;One way to label a binary tree&amp;rsquo;s nodes is to make the id be a map of
the location of the node in the tree. For example, if a node of the
tree has id &lt;code&gt;x&lt;/code&gt;, then the root&amp;rsquo;s children will be &lt;code&gt;xl&lt;/code&gt; and &lt;code&gt;xr&lt;/code&gt;,
respectively, where &lt;code&gt;l&lt;/code&gt; stands for &amp;lsquo;left&amp;rsquo; and &lt;code&gt;r&lt;/code&gt; stands for &amp;lsquo;right&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;If the root&amp;rsquo;s id is &lt;code&gt;s&lt;/code&gt;, then a typical node would be labeled
something like &lt;code&gt;sllrrl&lt;/code&gt;. Starting at the root, you can find the node
by going left two times, right two times, and then left.&lt;/p&gt;

&lt;p&gt;Here is the full source of the tree-generating code &lt;code&gt;cc-graph&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;quasiquote&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;
(define (cc-graph amount kinds-of-coins)

  (define display-node (lambda (label amount kinds-of-coins)
                         (begin
                           (display &amp;quot;  &amp;quot;)
                           (display label)
                           (display &amp;quot; [label=\&amp;quot;&amp;quot;)
                           (display `(cc ,amount ,kinds-of-coins))
                           (display &amp;quot;\&amp;quot;];&amp;quot;)
                           (newline))))

  (define display-edge (lambda (a b)
                         (begin
                           (display &amp;quot;  &amp;quot;)
                           (display a)
                           (display &amp;quot; -&amp;gt; &amp;quot;)
                           (display b)
                           (display &amp;quot;;&amp;quot;)
                           (newline))))

  (define base-case (lambda (amount kinds-of-coins)
                      (or (&amp;lt; amount 0)
                          (= kinds-of-coins 0)
                          (= amount 0))))

  (define left (lambda (label)
                  (string-append label &amp;quot;l&amp;quot;)))

  (define right (lambda (label)
                  (string-append label &amp;quot;r&amp;quot;)))


  ; label is the unique label of the function invocation
  (define (recurse label amount kinds-of-coins)
    (if (base-case amount kinds-of-coins)
        (display-node label amount kinds-of-coins)
        (begin
          (display-node label amount kinds-of-coins)
          (display-edge label (left label))
          (display-edge label (right label))
          (recurse (left label) amount (- kinds-of-coins 1))
          (recurse (right label)
                   (- amount (first-denomination kinds-of-coins))
                   kinds-of-coins))))

  (begin
    (display &amp;quot;digraph {&amp;quot;)
    (newline)
    (recurse &amp;quot;s&amp;quot; amount kinds-of-coins)
    (newline)
    (display &amp;quot;}&amp;quot;)))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, the output of running &lt;code&gt;(cc-graph 11 5)&lt;/code&gt;, then piping the
results into GraphViz gives the desired tree:&lt;/p&gt;

&lt;p&gt;{% img /images/blogimg/cc_11_5.png %}&lt;/p&gt;

&lt;p&gt;I love this way of visualizing recursion, you can see how the problem
is reduced into simpler sub-problems, and that there is a distinct
&amp;lsquo;shape&amp;rsquo; to the computation.&lt;/p&gt;

&lt;p&gt;There are more than 100 edges in that tree, I would not have wanted to
do that by hand, all for a measley value of four.&lt;/p&gt;

&lt;p&gt;The final value of &lt;code&gt;(cc 11 5)&lt;/code&gt; is 4, that is, there are 4 ways of
making change for 11 cents. Unfortunately, this solution doesn&amp;rsquo;t say
what exact combinations of coins, only that there are four.&lt;/p&gt;

&lt;p&gt;Just thinking about it, you can make 11 cents with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;11 pennies&lt;/li&gt;
&lt;li&gt;6 pennies, 1 nickel&lt;/li&gt;
&lt;li&gt;1 penny, 2 nickels&lt;/li&gt;
&lt;li&gt;1 penny, 1 dime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would like to generalize &lt;code&gt;cc-graph&lt;/code&gt; so that I can get a
visualization of any recursive function in Scheme, this will take more
knowledge of the language and it&amp;rsquo;s introspective features, stay tuned!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>