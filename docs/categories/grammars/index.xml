<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grammars on tlehman@home</title>
    <link>/categories/grammars/index.xml</link>
    <description>Recent content in Grammars on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/grammars/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parsing nested expressions using Bison</title>
      <link>/blog/2015/01/27/parsing-nested-expressions-using-bison/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/01/27/parsing-nested-expressions-using-bison/</guid>
      <description>&lt;p&gt;I modified my &lt;a href=&#34;/blog/2015/01/22/tip-calculation-using-bison-grammar/&#34;&gt;tipcalc&lt;/a&gt; program to handle expressions of arbitrary depth, so now it can handle input like &lt;code&gt;((($100 + 2%) + 2%) - 3%) + 3.5%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The trick was to change the &lt;code&gt;start&lt;/code&gt; symbol to match &lt;code&gt;binary_expression&lt;/code&gt;, and then define &lt;code&gt;binary_expression&lt;/code&gt; recursively, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;binary_expression:
    dollars OP_PLUS percentage
    |
    dollars OP_MINUS percentage
    |
    LPAREN binary_expression RPAREN OP_PLUS percentage
    |
    LPAREN binary_expression RPAREN OP_MINUS percentage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what makes this new version a context-free grammar and not a regular grammar. Now, if you think that you could still handle this input with a regular expression, notice that adding percentages is not associative. For example, you might think we could drop the parens and just parse &lt;code&gt;$100 + 2% + 2% + 2%&lt;/code&gt; using &lt;code&gt;/\$\d+ (\+ \d\%)+/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    \$\d+ (\+ \d\%)+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://www.debuggex.com/i/EaZiAO8PWJosT0b_.png&#34; alt=&#34;Regular expression visualization&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.debuggex.com/r/EaZiAO8PWJosT0b_&#34;&gt;Debuggex Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, if instead we wrote &lt;code&gt;$100 + 2% - 2% + 2%&lt;/code&gt;, associativity says we can reduce it to &lt;code&gt;$100 + 2%&lt;/code&gt;, however, when associated to the left &lt;code&gt;(($100 + 2%) - 2%) + 2%&lt;/code&gt; it is clear that the result is different from &lt;code&gt;$100 + 2%&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>