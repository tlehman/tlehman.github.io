<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google on tlehman@home</title>
    <link>/categories/google/index.xml</link>
    <description>Recent content in Google on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/google/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Simplifying client-side web development with Angular.js</title>
      <link>/blog/2012/07/08/simplifying-client-side-web-development-with-angular-dot-js/</link>
      <pubDate>Sun, 08 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/07/08/simplifying-client-side-web-development-with-angular-dot-js/</guid>
      <description>&lt;p&gt;For dealing with client-side web development there are a lot of ways to bind data to elements to HTML. However, none have stood out quite as well as &lt;a href=&#34;http://angular.js&#34;&gt;Angular.js&lt;/a&gt; from Google. There is a &lt;a href=&#34;http://www.youtube.com/watch?v=uFTFsKmkQnQ&amp;amp;feature=player_embedded&#34;&gt;good screencast&lt;/a&gt; giving a side-by-side comparison of a &amp;ldquo;hello name&amp;rdquo; app done in jQuery and then in Angular.&lt;/p&gt;

&lt;p&gt;I have been meaning to play around with this library for a while, but I didn&amp;rsquo;t have any unique ways of applying it. However, just today, my girlfriend suggested that we try to Latinize our names, similar to how &lt;a href=&#34;http://en.wikipedia.org/wiki/Carl_Linnaeus&#34;&gt;Carl Linnaeus&lt;/a&gt; did. I thought it was a cool idea, and assumed that someone had already made an app that did just that. It turns out that no one has, however, I did find &lt;a href=&#34;http://www.ehow.com/how_7378149_convert-english-first-name-latin.html&#34;&gt;this article&lt;/a&gt; on ehow.com on how to turn an english first name to Latin. The rules are simple, but instead of spelling them out here, I&amp;rsquo;m going to link to the app that I made, and then dissect it. The dissection will show a little bit of Angular.js in action.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/apps/latinizer&#34; target=&#34;_new&#34;&gt;Heres the app.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This app had to respond to the events triggered by changing the text in the text box, and also to the changing radio button. If I was using something like jQuery, I&amp;rsquo;d have to rig up handlers for all those events. Also, any time the name or the gender changes, I&amp;rsquo;d have to update the label that displayed the latinized name. This is not hard, but it does get tedious, especially for larger apps.&lt;/p&gt;

&lt;p&gt;The way Angular handles this is by abstracting away all of the event handling, and making it so that the developer (me) can just bind a label to an object, and then bind controls to an object, and trigger all the updates automatically.&lt;/p&gt;

&lt;p&gt;Using the Latinizer example, let&amp;rsquo;s start with the view:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;script src=&amp;quot;http://code.angularjs.org/angular-1.0.1.min.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;latinizer.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;Convert English name into Latin&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div ng-controller=&amp;quot;LatinizerCtrl&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;First Name:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;person.firstName&amp;quot; placeholder=&amp;quot;Enter First Name&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;gender&amp;quot; value=&amp;quot;Male&amp;quot; ng-model=&amp;quot;person.gender&amp;quot;&amp;gt;Male
        &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;gender&amp;quot; value=&amp;quot;Female&amp;quot; ng-model=&amp;quot;person.gender&amp;quot;&amp;gt;Female
        &amp;lt;br&amp;gt;
        &amp;lt;br&amp;gt;
        &amp;lt;h1&amp;gt;{{latinizeFirstName(person)}}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;

    Note: the rules being used here are from 
		&amp;lt;a href=&amp;quot;http://www.ehow.com/how_7378149_convert-english-first-name-latin.html&amp;quot;&amp;gt;this page&amp;lt;/a&amp;gt;.
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is just an ordinary html file that includes the angular.js library, and some of the elements have &amp;ldquo;ng-something&amp;rdquo; attributes. Those attributes tell angular where to get and set data.&lt;/p&gt;

&lt;p&gt;Note the &amp;ldquo;ng-controller&amp;rdquo; element, it tells angular to use the controller named &amp;ldquo;LatinizerCtrl&amp;rdquo;, that is defined in the following javascript file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;		function LatinizerCtrl($scope) {
    $scope.person = {
        firstName:&amp;quot;&amp;quot;,
        gender:&amp;quot;&amp;quot;
    };

    $scope.latinizeFirstName = function(person) {
        var latinFirstName = person.firstName;

        if(person.gender == &amp;quot;Male&amp;quot;) {
            latinFirstName += &amp;quot;us&amp;quot;;
        } else if(person.gender == &amp;quot;Female&amp;quot;) {
            if(person.firstName.match(/y$/)) {
                latinFirstName = latinFirstName.replace(/y$/, &amp;quot;i&amp;quot;);
            }
            latinFirstName += &amp;quot;a&amp;quot;;
        }

        if(person.firstName == &amp;quot;&amp;quot;) {
            latinFirstName = &amp;quot;&amp;quot;;
        }
        return latinFirstName;
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part of the controller sets up the &lt;code&gt;person&lt;/code&gt; model, it has a first name and a gender, then the &lt;code&gt;latinizerFirstName&lt;/code&gt; function takes the person, and based on their gender, gives them the appropriate latin first name.&lt;/p&gt;

&lt;p&gt;I have not been able to find rules for converting last names to Latin. I have found large lists and tables of Latin surnames, but that is beyond the scope of this little exploration. Perhaps in the future I will make a server-side component, with a key-value store to convert surnames to Latin.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>