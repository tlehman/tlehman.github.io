<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberrypi on tlehman@home</title>
    <link>/categories/raspberrypi/index.xml</link>
    <description>Recent content in Raspberrypi on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/raspberrypi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hooking Jenkins up to a computer-controlled light switch</title>
      <link>/blog/2013/03/18/hooking-jenkins-up-to-a-computer-controlled-light-switch/</link>
      <pubDate>Mon, 18 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/03/18/hooking-jenkins-up-to-a-computer-controlled-light-switch/</guid>
      <description>&lt;p&gt;About a week ago I &lt;a href=&#34;/blog/2013/03/10/make-a-computer-controlled-light-switch-with-a-raspberry-pi/&#34;&gt;wrote about how to hook up a light switch to a raspberry pi&lt;/a&gt;. Having a computer-controlled light switch is nice, but the novelty wears off pretty quickly. The next question that arises usually is &lt;em&gt;how can I make this useful?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At work, our continuous integration server, which runs &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;, lets us know when one of the team members has broken the build. To make sure that we get the memo promptly so we can commence with the public shaming, we use tools that change color to indicate the current test status.&lt;/p&gt;

&lt;p&gt;The problem with our current way of doing things is that there is no sound, and it requires that someone be at their computer. To remedy this situation, we wired up physical lights to a raspberry pi running a Debian GNU/Linux variant, and wrote this script to toggle the lights.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On means Passing  (all jobs passed)&lt;/li&gt;
&lt;li&gt;Off means Failing (at least one job failed)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data flows from Jenkins to the Raspberry-Pi as follows:&lt;/p&gt;

&lt;div style=&#34;width:300px;margin:auto&#34;&gt;
{% img /images/blogimg/tds.png %}
&lt;/div&gt;

&lt;p&gt;gpio stands for (General Purpose Input/Output), the utility is part of the &lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/&#34;&gt;wiringPi&lt;/a&gt; package&lt;/p&gt;

&lt;p&gt;NOTE: You need to set the following environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JENKINS_USERNAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;JENKINS_PASSWORD&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;JENKINS_HOSTNAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ruby-lang.org&#34;&gt;Ruby&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/&#34;&gt;wiringPi&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --user $JENKINS_USERNAME:$JENKINS_PASSWORD $JENKINS_HOSTNAME/api/json 2&amp;gt; /dev/null                      |   # (Jenkins Job Statuses)

ruby -rjson -e &#39;puts (JSON.parse(STDIN.read)[&amp;quot;jobs&amp;quot;].map{|j| j[&amp;quot;color&amp;quot;]}.all?{|c| c==&amp;quot;blue&amp;quot;} ? &amp;quot;up&amp;quot;:&amp;quot;down&amp;quot;)&#39; |   # (JSON parser/extractor) 

while read line; do   gpio write 4 $line;     done                                                               # (gpio utility)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script runs on the raspberry pi itself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make a computer-controlled light switch with a Raspberry Pi</title>
      <link>/blog/2013/03/10/make-a-computer-controlled-light-switch-with-a-raspberry-pi/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/03/10/make-a-computer-controlled-light-switch-with-a-raspberry-pi/</guid>
      <description>&lt;p&gt;To build a computer-controlled light switch, you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; ($35)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.adafruit.com/products/268&#34;&gt;Adafruit Powerswitch Tail 2&lt;/a&gt; ($25)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The powerswitch tail looks like an extension cord with some holes in it to wire it into your own circuit. Connect the powerswitch to the raspberry pi as in the image below (on is connected to pin 23):&lt;/p&gt;

&lt;p&gt;{% img /images/blogimg/rasbpi_adafruit.jpg %}&lt;/p&gt;

&lt;p&gt;Then, the following python program will allow you to type &lt;code&gt;./switch on&lt;/code&gt; or &lt;code&gt;./switch off&lt;/code&gt; from the command line as root.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# Turn switch on/off
# by tlehman

import RPi.GPIO as io
import sys

io.setmode(io.BCM)
pin = 23
io.setwarnings(False)
io.setup(pin, io.OUT)                 # set pin 23 as output

if len(sys.argv) &amp;gt; 1:
    state = sys.argv[1]               # get command line argument (&#39;on&#39; or &#39;off&#39;)
    io.output(pin, state == &#39;on&#39;)     # if state is on, let pin 23 connect the circuit, otherwise break the circuit
else:
    print(&amp;quot;Usage: &amp;quot;)
    print(&amp;quot;  ./switch (on|off)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run this, carefully plug in a lamp (or other appliance that uses a standard 120V U.S. outlet), then&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo su
./switch on
./switch off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a video of the light being switched off and then back on, not very exciting, but it works:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/IO_BZ0mRYyQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This on it&amp;rsquo;s own is not very useful or amusing, but this can easily be tied together with any API or command line utility. For example, I plan to connect this to our continuous integration server at work so that every time the tests fail, the switch turns some lights off, this could be achieved with a cron job, or perhaps a hook on Jenkins that sends a signal to the raspberry pi, there are so many possbilities.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>