<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on tlehman@home</title>
    <link>/categories/rails/index.xml</link>
    <description>Recent content in Rails on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Making a Go Game for the Web</title>
      <link>/blog/2015/11/03/making-a-go-game-for-the-web/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/11/03/making-a-go-game-for-the-web/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been feeling productive in the last few weeks. I just finished two Coursera classes, one in machine learning and one in Swift programming. I also finished my minimum viable go game: &lt;a href=&#34;http://goga.me&#34;&gt;goga.me&lt;/a&gt;. And we are working on a really exciting feature at work. I really like having lots of interesting things to work on. Anyway, enough feelings, you came here for games and code.&lt;/p&gt;

&lt;p&gt;The game of Go is ancient, it has very few rules, but an unfathomable level of complexity emerges from all the possible ways the pieces can be put on the board. The graphics were very straightforward to implement, it&amp;rsquo;s just a square grid with some colored circles, I don&amp;rsquo;t usually work with graphics, so I experimented with some different web technologies to see what worked best.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/blogimg/gogame_screenshot_0.png&#34; alt=&#34;example go game&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;attempt-1-html5-canvas&#34;&gt;Attempt 1, HTML5 Canvas&lt;/h2&gt;

&lt;p&gt;About a year ago I wrote a Go board using the HTML5 &amp;lt;canvas&amp;gt; element, &lt;a href=&#34;https://github.com/tlehman/go-websocket/blob/master/go_game.js&#34;&gt;here&amp;rsquo;s the source code&lt;/a&gt;, it doesn&amp;rsquo;t actually have a server side, I decided to ditch that approach, since canvas is really great for making arbitrarily complicated bitmap graphics, but I needed something much simpler. Also, when zooming in on a phone, the click event location was not the same as the location where the code drew a new piece.&lt;/p&gt;

&lt;h2 id=&#34;attempt-2-svg&#34;&gt;Attempt 2, SVG&lt;/h2&gt;

&lt;p&gt;After almost a year I came back to the project, I wrote out a rails backend for the data storage and game logic, and then learned SVG (Scalable Vector Graphics). Here&amp;rsquo;s &lt;a href=&#34;https://github.com/tlehman/goga.me/blob/b585f4dec45d726615d73fca301c261d2df17167/app/views/matches/show.html.erb&#34;&gt;the source code&lt;/a&gt;, what I like about SVG is that I can make the board positions part of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Document_Object_Model&#34;&gt;DOM&lt;/a&gt; and bind javascript events to the positions. This solves a problem with zooming, so that when I zoom in on a phone, the click event shows up in the right position.&lt;/p&gt;

&lt;h2 id=&#34;websockets-enabling-live-back-and-forth-gameplay&#34;&gt;WebSockets, enabling live back and forth gameplay&lt;/h2&gt;

&lt;p&gt;Another exciting technology that I spent some time learning about was &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&#34;&gt;WebSockets&lt;/a&gt;, this allows two players to open a direct connection to one another, so that as soon as someone plays a piece, the other one knows. This way, the user does not have to refresh, it&amp;rsquo;s all live. I used the websockets-rails library to handle setting up a user-to-user connection through the rails backend. The &lt;a href=&#34;https://github.com/tlehman/goga.me/blob/master/app/views/matches/show.html.erb#L67-L80&#34;&gt;source code to handle binding and triggering is here&lt;/a&gt;. To see it in action, &lt;a href=&#34;http://goga.me/users/sign_up&#34;&gt;make an account at goga.me&lt;/a&gt;, and then &lt;a href=&#34;http://goga.me/matches/new&#34;&gt;create a match&lt;/a&gt;, and click &amp;lsquo;Start Match&amp;rsquo;, that will start a match against yourself, you can open it up on multiple devices, and when you start playing, the other screen will immediately update, it&amp;rsquo;s pretty cool!&lt;/p&gt;

&lt;h2 id=&#34;other-challenges&#34;&gt;Other challenges&lt;/h2&gt;

&lt;p&gt;After getting the graphics and networking to work correctly, the only other major challenge was handling capturing. Capturing is where one color completely surrounds the other color, and the surrounded pieces get removed, you can see it in the following screen capture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/blogimg/gogame_capturing.gif&#34; alt=&#34;example capturing in a go game&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The challenge is to determine the parts of the board that are connected. Since each piece can only be connected to it&amp;rsquo;s four neighboring pieces of the same color, you can start finding connected components by picking a point and walking to every piece connected to it that is the same color. A prime choice for this problem is a breadth first search:&lt;/p&gt;

&lt;h2 id=&#34;breadth-first-search&#34;&gt;Breadth First Search&lt;/h2&gt;

&lt;p&gt;To wrap my head around this algorithm I had to get out my trusty graph theory book. Here&amp;rsquo;s a summary of the algorithm and an example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;: An unweighted graph and a start vertex u&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maintain a set R of vertices that have been reached but not searched and&lt;/li&gt;
&lt;li&gt;a set S of vertices that have been searched.&lt;/li&gt;
&lt;li&gt;The set R is maintained as a First-In First-Out list (&lt;a href=&#34;https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29&#34;&gt;queue&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: R = {u}, S = ø, d(u,u) = 0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iteration&lt;/strong&gt;: As long as R &amp;neq; ø, we search from the first vertex v of R. The neighbors of v not in (S U R) are added to the back of R and then v is removed from the front of R and placed in S.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Let G be the adjacency graph of the following Go shape:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   1  2  3  4  5  6
 1    .  o  o  o  .
 2    .  .  .  .  .  &amp;lt;--- black component
 3    .
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;S&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(2,1)&lt;/td&gt;
&lt;td&gt;[(2,1)]&lt;/td&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(2,1)&lt;/td&gt;
&lt;td&gt;[(2,2)]&lt;/td&gt;
&lt;td&gt;{(2,1)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(2,2)&lt;/td&gt;
&lt;td&gt;[(2,3),(3,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(2,3)&lt;/td&gt;
&lt;td&gt;[(3,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(3,2)&lt;/td&gt;
&lt;td&gt;[(4,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(4,2)&lt;/td&gt;
&lt;td&gt;[(5,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(5,2)&lt;/td&gt;
&lt;td&gt;[(6,2)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2),(5,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(6,2)&lt;/td&gt;
&lt;td&gt;[(6,1)]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2),(5,2),(6,2)}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;(6,1)&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;td&gt;{(2,1),(2,2),(2,3),(3,2),(4,2),(5,2),(6,2),(6,1)}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Once I worked through the steps with this example and several others, writing the code to implement it was very straightforward, here&amp;rsquo;s the &lt;a href=&#34;https://github.com/tlehman/go-websocket/blob/8094890048ca845c0fef416573b8aba533ca6ea9/jasmine/src/ComponentMap.js#L16-L51&#34;&gt;javascript version&lt;/a&gt; and the &lt;a href=&#34;https://github.com/tlehman/goga.me/blob/b585f4dec45d726615d73fca301c261d2df17167/app/presenters/board_presenter.rb#L24-L41&#34;&gt;ruby version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My go game is at a good stopping point for now, I still need to fix a few edge cases and add a chat feature. Also, I realized how satisfying it is to take a bunch of stuff I learned and make something real with it. I plan on making a native mobile client to this (iOS and Android), but that will take some more time and work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing the &#39;belongs to&#39; relation in rails app models</title>
      <link>/blog/2014/07/22/visualizing-the-belongs-to-relation-in-rails-app-models/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/07/22/visualizing-the-belongs-to-relation-in-rails-app-models/</guid>
      <description>&lt;p&gt;When working on rails apps, I usually have to make a mental map of the models and how they interrelate.&lt;/p&gt;

&lt;p&gt;An Active Record model can belong to another, but when you have more than half a dozen models, keeping all
the belongs_to relations in mind quickly becomes impossible. As a solution to this, I made a command line
program called &lt;a href=&#34;https://github.com/tlehman/bin#argraph&#34;&gt;argraph&lt;/a&gt;, for &amp;lsquo;ActiveRecord graph&amp;rsquo;, it produces a digraph in the
&lt;a href=&#34;http://www.graphviz.org/doc/info/lang.html&#34;&gt;DOT language&lt;/a&gt;, which can be rendered as an image
using &lt;a href=&#34;http://www.graphviz.org/&#34;&gt;GraphViz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The nodes are models, and the edges are the &amp;lsquo;belongs to&amp;rsquo; relation.&lt;/p&gt;

&lt;p&gt;The way to use it is to check it out or fork my &lt;a href=&#34;https://github.com/tlehman/bin&#34;&gt;bin&lt;/a&gt; repo, make sure that directory
is in your PATH variable, cd to the root of your rails app and run &lt;code&gt;argraph&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As an example, suppose you have the &lt;a href=&#34;https://github.com/discourse/discourse&#34;&gt;discourse&lt;/a&gt; rails app checked out,
and you want to find out how some of it&amp;rsquo;s models are interrelated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd discourse
$ argraph Post Topic Category PostReply User UserAction UserHistory QuotedPost View UserAvatar
digraph {
 Post -&amp;gt; User
 Post -&amp;gt; Topic
 Topic -&amp;gt; Category
 Topic -&amp;gt; User
 Category -&amp;gt; Topic
 Category -&amp;gt; User
 PostReply -&amp;gt; Post
 UserAction -&amp;gt; User
 QuotedPost -&amp;gt; Post
 QuotedPost -&amp;gt; QuotedPost
 View -&amp;gt; User
 UserAvatar -&amp;gt; User
}
$ !! | dot -Tpng &amp;gt; discourse.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above graph renders as:
&lt;img src=&#34;https://i.imgur.com/YQOyHUn.png&#34; alt=&#34;discourse model graph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can also run the command with no arguments, in which case it maps out all models, but on bigger apps, this can be hard to follow,
so I found it useful to be able to explore subgraphs containing more models than my memory could fit, but not so many that the image
was polluted and hard to follow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convention over configuration, unless those conventions don&#39;t make sense</title>
      <link>/blog/2012/07/31/convention-over-configuration-unless-those-conventions-dont-make-sense/</link>
      <pubDate>Tue, 31 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/07/31/convention-over-configuration-unless-those-conventions-dont-make-sense/</guid>
      <description>&lt;p&gt;Ruby on Rails is a so-called opinionated framework, this means that it bakes in a bunch of conventions for how applications should be built. By following these conventions, you can write less code, and make more software. This is great, unless some of those conventions depend on something inconsistent or irregular.&lt;/p&gt;

&lt;p&gt;One thing that is particularly inconsistent and irregular is the English
language. Do you remember the rule for &lt;strong&gt;I&lt;/strong&gt;s and &lt;strong&gt;E&lt;/strong&gt;s? &amp;ldquo;I before E &lt;em&gt;except&lt;/em&gt;
after C and &lt;em&gt;except&lt;/em&gt; after words &lt;em&gt;like&lt;/em&gt; neighbor and weigh&amp;hellip;&amp;ldquo;. This is
typical of the English language, exceptions abound. There is no
consistent rule we can give for combining the letters I and E in a
sentence.&lt;/p&gt;

&lt;p&gt;Similarly, pluralization follows no single scheme, there are words like
&amp;lsquo;chair&amp;rsquo; that are pluralized as &amp;lsquo;chairs&amp;rsquo;, and then there are words like
&amp;lsquo;sheep&amp;rsquo; that are their own plurals. Finally, there are words inherited
from Latin like cactus, which can be pluralized as &amp;lsquo;cactii&amp;rsquo; or
&amp;lsquo;cactuses&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;The reason I am bringing this up is that Ruby on Rails has a module
called &lt;code&gt;ActiveSupport::Inflector&lt;/code&gt; that has pluralization methods built
into it. One of the conventions used in rails applications is the
following: if you have a data model representing a &lt;code&gt;thing&lt;/code&gt;, then rails
generates a table in your database called &lt;code&gt;things&lt;/code&gt;, where each record in
the database represents a single &lt;code&gt;thing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The inflector module kicks in so that you don&amp;rsquo;t have to say what the
name of the table will be, rails takes care of that for you. This works
fine, most of the time. I recently had to fix an application that was
failing because it has ambiguous routes, that means that a route has
multiple possible controller actions it could trigger, this is not good,
hence the error. The culprit was a model called &lt;code&gt;series&lt;/code&gt;. When you
pluralize it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Inflector.pluralize(&amp;quot;series&amp;quot;)
 =&amp;gt; &amp;quot;series&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is the same word, this leads to ambiguous routes, since there
is a &lt;code&gt;series_path&lt;/code&gt; (singular) and &lt;code&gt;series_path&lt;/code&gt; (plural) that are
supposed to mean different things.&lt;/p&gt;

&lt;p&gt;This problem took me a few days to solve, and it would have been a
non-issue if I would just made my own database table names and route.
Not because my conventions are better, but simply because I would have
been forced to think about what things are called, instead of trusting
that the conventions of the framework will yield consistent results.&lt;/p&gt;

&lt;p&gt;I think that &amp;lsquo;convention over configuration&amp;rsquo; is a good idea, but only
when the conventions are logical and make sense. At the vary least,
there should be no ambiguities.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>