<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning on tlehman@home</title>
    <link>/tags/machine-learning/index.xml</link>
    <description>Recent content in Machine Learning on tlehman@home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Seeing the bulk: a primer on dimensionality reduction</title>
      <link>/posts/seeing-the-bulk-a-primer-on-dimensionality-reduction/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/seeing-the-bulk-a-primer-on-dimensionality-reduction/</guid>
      <description>

&lt;p&gt;If you haven&amp;rsquo;t seen Interstellar, you might not get the reference in the title. Don&amp;rsquo;t sweat it, &lt;a href=&#34;http://interstellarfilm.wikia.com/wiki/Bulk_Beings&#34;&gt;the bulk beings&lt;/a&gt; are some advanced civilization that is able to move outside the familiar 3D space that we are stuck in. A similar plot device was used in Edwin Abbott&amp;rsquo;s book Flatland.&lt;/p&gt;

&lt;p&gt;Outside of entertainment, there is a lot of value in attempting to understand high dimensional spaces. Physics, machine learning, and engineering control systems all make use of higher-dimensional spaces in one way or another. I first got interested in higher dimensional spaces in high school, I saw a talk by a Russian physicist that introduced 4-dimensional cubes, and then made some passing comment that &amp;ldquo;there are six extra dimensions of space&amp;rdquo;, before closing up the lecture. That last part was confusing, but I later realized he was talking about &lt;a href=&#34;https://en.wikipedia.org/wiki/Calabi%E2%80%93Yau_manifold&#34;&gt;Calabi-Yau manifolds&lt;/a&gt; from string theory.&lt;/p&gt;

&lt;p&gt;In this post we will learn how datasets can be thought of as sets of points in a high dimensional space, and then we will learn how to map those sets into low (2 or 3)-dimensional spaces so that we can see them. The goal will be to preserve as much structure as possible, but still fit everything into a space we can see and feel.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with 1D, real numbers are points on a line, easy. In 2D, we can use a pair (x,y) to name any point in a plane. For 3D, we can use triplets (x,y,z) to name points in a space like the one we physically live in.&lt;/p&gt;

&lt;p&gt;If we wanted to name the four corners of a tetrahedron, we could write out a table of data like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;z&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But it&amp;rsquo;s not clear what that data looks like until we visualize it in 3D space:&lt;/p&gt;

&lt;script src=&#34;/js/three.min.js&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;tetrahedron&#34;&gt;&lt;/div&gt;
&lt;script&gt;
var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 );

var renderer = new THREE.WebGLRenderer();
renderer.setSize( 300, 300 );
renderer.setClearColor( 0xfaf8f8, 1 );
document.getElementById(&#34;tetrahedron&#34;).appendChild( renderer.domElement );

var geometry = new THREE.Geometry();
var x1 = new THREE.Vector3(  1 ,  1 ,  1 )
var x2 = new THREE.Vector3( -1 , -1 ,  1 )
var x3 = new THREE.Vector3( -1 ,  1 , -1 )
var x4 = new THREE.Vector3(  1 , -1 , -1 )

geometry.vertices.push(x1);
geometry.vertices.push(x2);
geometry.vertices.push(x3);
geometry.vertices.push(x4);

var material = new THREE.PointsMaterial( { color: 0x888888, size: 0.25 } );
var points = new THREE.Points(geometry, material);

scene.add( points );

camera.position.z = 5;

function render() {
    requestAnimationFrame( render );
    points.rotation.x += 0.01;
    points.rotation.y += 0.01;
    renderer.render( scene, camera );
}
render();
&lt;/script&gt;

&lt;p&gt;We can extend the basic idea behind taking triples (x,y,z) and imagining them as points in a 3-dimensional space. Instead of triples, we can use n-tuples (x&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;n&lt;/sub&gt;) and imagining them as points in an n-dimensional space. We can then measure distances between any two points (x&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;n&lt;/sub&gt;) and (y&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;, &amp;hellip;, y&lt;sub&gt;n&lt;/sub&gt;) by using the Pythagorean theorem. So all the tools we have for doing geometry with numbers (analytic geometry and linear algebra) work well, but we can&amp;rsquo;t directly visualize those spaces, since our brains evolved in a 3-dimensional environment.&lt;/p&gt;

&lt;p&gt;The good news is that we can &amp;ldquo;compress&amp;rdquo; higher dimensional shapes into 3D and still preserve plenty of information.&lt;/p&gt;

&lt;h2 id=&#34;principal-components-analysis&#34;&gt;Principal Components Analysis&lt;/h2&gt;

&lt;p&gt;One technique to reduce the dimensionality of a dataset is called Principal Components Analysis. It starts by modeling the dataset as a matrix, and then finds the directions in which the data varies the most. Those directions that contain the most variation coincide with the &amp;ldquo;principal components&amp;rdquo; of the matrix. For an excellent visual introduction to this technique, check out &lt;a href=&#34;http://setosa.io/ev/principal-component-analysis/&#34;&gt;Victor Powell&amp;rsquo;s post on PCA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As an example, we will use a wine dataset&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; from 1991, it contains 13 properties (alcohol, malic acid, etc.) and 178 wines grown in the same region, but derived from three different plant varieties. Each property can be seen as a dimension, so using our spatial metaphor, we will imagine the 178 wines as points in a 13-dimensional space. Applying PCA will help us find the three most important directions, and then we can visualize those 178 points in a familiar 3D space. I&amp;rsquo;ll add colors to distinguish the wines from the three wine varieties. We should expect to see some structure, namely, the different plant varieties should form clusters.&lt;/p&gt;

&lt;div class=&#34;col-group&#34;&gt;

&lt;div&gt;

(X,Y)

&lt;img alt=&#34;wine pca X-Y&#34; src=&#34;/images/bulk/wine-pca-xy.png&#34;&gt;

&lt;/div&gt;

&lt;div&gt;
(X,Z)
&lt;img alt=&#34;wine pca X-Z&#34; src=&#34;/images/bulk/wine-pca-xz.png&#34;&gt;
&lt;/div&gt;

&lt;div&gt;
(Y,Z)
&lt;img alt=&#34;wine pca Y-Z&#34; src=&#34;/images/bulk/wine-pca-yz.png&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;From the (Y,Z) chart you can see that there are two main clusters, the blue and the (red/green), and from the (X,Z) chart you can see that the red clusters more towards the center of mass and the green is on the periphery. Also from the (X,Y) chart, the same pattern of &amp;ldquo;red inside&amp;rdquo;, &amp;ldquo;green outside&amp;rdquo; hold. This is a good example of how bringing your data into a lower dimensional space helps understanding and solving certain problems. Data that have these clusters can be fed into machine learning algorithms to do classification, or they can be used to find natural categories to organize data on its own terms.&lt;/p&gt;

&lt;script src=&#34;/js/three.min.js&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;winepca&#34;&gt;&lt;/div&gt;&lt;script&gt;
var wscene = new THREE.Scene();
var wcamera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 );
var wrenderer = new THREE.WebGLRenderer();
wrenderer.setSize( 300, 300 );
wrenderer.setClearColor( 0xfaf8f8, 1 );
document.getElementById(&#39;winepca&#39;).appendChild( wrenderer.domElement );

var rgeo = new THREE.Geometry();
var ggeo = new THREE.Geometry();
var bgeo = new THREE.Geometry();
var w1 = new THREE.Vector3(  1 ,  1 ,  1 )
var w2 = new THREE.Vector3( -1 , -1 ,  1 )
var w3 = new THREE.Vector3( -1 ,  1 , -1 )
var w4 = new THREE.Vector3(  1 , -1 , -1 )

rgeo.vertices.push(w1);
ggeo.vertices.push(w2);
bgeo.vertices.push(w3);

var rmat = new THREE.PointsMaterial( { color: 0xFF0000, size: 0.25 } );
var gmat = new THREE.PointsMaterial( { color: 0x22BB22, size: 0.25 } );
var bmat = new THREE.PointsMaterial( { color: 0x0000FF, size: 0.25 } );

var rpts = new THREE.Points(rgeo, rmat);
var gpts = new THREE.Points(ggeo, gmat);
var bpts = new THREE.Points(bgeo, bmat);

wscene.add( rpts );
wscene.add( gpts );
wscene.add( bpts );

wcamera.position.z = 5;

function wrender() {
    requestAnimationFrame( wrender );
    rpts.rotation.x += 0.01;
    rpts.rotation.y += 0.01;
    bpts.rotation.x += 0.01;
    bpts.rotation.y += 0.01;
    gpts.rotation.x += 0.01;
    gpts.rotation.y += 0.01;
    wrenderer.render( wscene, wcamera );
}
wrender();
&lt;/script&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn1&#34;&gt;Wine Dataset &lt;a href=&#34;http://archive.ics.uci.edu/ml/datasets/Wine&#34;&gt;http://archive.ics.uci.edu/ml/datasets/Wine&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>